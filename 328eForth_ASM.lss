
AVRASM ver. 2.2.8  c:\users\rgeorge\Documents\Atmel Studio\7.0\328eForth_ASM\328eForth_ASM\main.asm Tue Jul 05 12:17:15 2022

[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.7.374\avrasm\inc\m328Pdef.inc'
c:\users\rgeorge\Documents\Atmel Studio\7.0\328eForth_ASM\328eForth_ASM\main.asm(9): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.7.374\avrasm\inc\m328Pdef.inc'
c:\users\rgeorge\Documents\Atmel Studio\7.0\328eForth_ASM\328eForth_ASM\main.asm(2803): warning: Register r20 already defined by the .DEF directive
[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.7.374\avrasm\inc\m328Pdef.inc'
c:\users\rgeorge\Documents\Atmel Studio\7.0\328eForth_ASM\328eForth_ASM\main.asm(9): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.7.374\avrasm\inc\m328Pdef.inc'
                                 
                                 ;
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega328P.xml **********
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m328Pdef.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega328P
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega328P
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M328PDEF_INC_
                                 #define _M328PDEF_INC_
                                 
                                 
                                 #pragma partinc 0
                                 
                                 ; ***** SPECIFY DEVICE ***************************************************
                                 .device ATmega328P
                                 #pragma AVRPART ADMIN PART_NAME ATmega328P
                                 .equ	SIGNATURE_000	= 0x1e
                                 .equ	SIGNATURE_001	= 0x95
                                 .equ	SIGNATURE_002	= 0x0f
                                 
                                 #pragma AVRPART CORE CORE_VERSION V2E
                                 
                                 
                                 ; ***** I/O REGISTER DEFINITIONS *****************************************
                                 ; NOTE:
                                 ; Definitions marked "MEMORY MAPPED"are extended I/O ports
                                 ; and cannot be used with IN/OUT instructions
                                 .equ	UDR0	= 0xc6	; MEMORY MAPPED
                                 .equ	UBRR0L	= 0xc4	; MEMORY MAPPED
                                 .equ	UBRR0H	= 0xc5	; MEMORY MAPPED
                                 .equ	UCSR0C	= 0xc2	; MEMORY MAPPED
                                 .equ	UCSR0B	= 0xc1	; MEMORY MAPPED
                                 .equ	UCSR0A	= 0xc0	; MEMORY MAPPED
                                 .equ	TWAMR	= 0xbd	; MEMORY MAPPED
                                 .equ	TWCR	= 0xbc	; MEMORY MAPPED
                                 .equ	TWDR	= 0xbb	; MEMORY MAPPED
                                 .equ	TWAR	= 0xba	; MEMORY MAPPED
                                 .equ	TWSR	= 0xb9	; MEMORY MAPPED
                                 .equ	TWBR	= 0xb8	; MEMORY MAPPED
                                 .equ	ASSR	= 0xb6	; MEMORY MAPPED
                                 .equ	OCR2B	= 0xb4	; MEMORY MAPPED
                                 .equ	OCR2A	= 0xb3	; MEMORY MAPPED
                                 .equ	TCNT2	= 0xb2	; MEMORY MAPPED
                                 .equ	TCCR2B	= 0xb1	; MEMORY MAPPED
                                 .equ	TCCR2A	= 0xb0	; MEMORY MAPPED
                                 .equ	OCR1BL	= 0x8a	; MEMORY MAPPED
                                 .equ	OCR1BH	= 0x8b	; MEMORY MAPPED
                                 .equ	OCR1AL	= 0x88	; MEMORY MAPPED
                                 .equ	OCR1AH	= 0x89	; MEMORY MAPPED
                                 .equ	ICR1L	= 0x86	; MEMORY MAPPED
                                 .equ	ICR1H	= 0x87	; MEMORY MAPPED
                                 .equ	TCNT1L	= 0x84	; MEMORY MAPPED
                                 .equ	TCNT1H	= 0x85	; MEMORY MAPPED
                                 .equ	TCCR1C	= 0x82	; MEMORY MAPPED
                                 .equ	TCCR1B	= 0x81	; MEMORY MAPPED
                                 .equ	TCCR1A	= 0x80	; MEMORY MAPPED
                                 .equ	DIDR1	= 0x7f	; MEMORY MAPPED
                                 .equ	DIDR0	= 0x7e	; MEMORY MAPPED
                                 .equ	ADMUX	= 0x7c	; MEMORY MAPPED
                                 .equ	ADCSRB	= 0x7b	; MEMORY MAPPED
                                 .equ	ADCSRA	= 0x7a	; MEMORY MAPPED
                                 .equ	ADCH	= 0x79	; MEMORY MAPPED
                                 .equ	ADCL	= 0x78	; MEMORY MAPPED
                                 .equ	TIMSK2	= 0x70	; MEMORY MAPPED
                                 .equ	TIMSK1	= 0x6f	; MEMORY MAPPED
                                 .equ	TIMSK0	= 0x6e	; MEMORY MAPPED
                                 .equ	PCMSK1	= 0x6c	; MEMORY MAPPED
                                 .equ	PCMSK2	= 0x6d	; MEMORY MAPPED
                                 .equ	PCMSK0	= 0x6b	; MEMORY MAPPED
                                 .equ	EICRA	= 0x69	; MEMORY MAPPED
                                 .equ	PCICR	= 0x68	; MEMORY MAPPED
                                 .equ	OSCCAL	= 0x66	; MEMORY MAPPED
                                 .equ	PRR	= 0x64	; MEMORY MAPPED
                                 .equ	CLKPR	= 0x61	; MEMORY MAPPED
                                 .equ	WDTCSR	= 0x60	; MEMORY MAPPED
                                 .equ	SREG	= 0x3f
                                 .equ	SPL	= 0x3d
                                 .equ	SPH	= 0x3e
                                 .equ	SPMCSR	= 0x37
                                 .equ	MCUCR	= 0x35
                                 .equ	MCUSR	= 0x34
                                 .equ	SMCR	= 0x33
                                 .equ	ACSR	= 0x30
                                 .equ	SPDR	= 0x2e
                                 .equ	SPSR	= 0x2d
                                 .equ	SPCR	= 0x2c
                                 .equ	GPIOR2	= 0x2b
                                 .equ	GPIOR1	= 0x2a
                                 .equ	OCR0B	= 0x28
                                 .equ	OCR0A	= 0x27
                                 .equ	TCNT0	= 0x26
                                 .equ	TCCR0B	= 0x25
                                 .equ	TCCR0A	= 0x24
                                 .equ	GTCCR	= 0x23
                                 .equ	EEARH	= 0x22
                                 .equ	EEARL	= 0x21
                                 .equ	EEDR	= 0x20
                                 .equ	EECR	= 0x1f
                                 .equ	GPIOR0	= 0x1e
                                 .equ	EIMSK	= 0x1d
                                 .equ	EIFR	= 0x1c
                                 .equ	PCIFR	= 0x1b
                                 .equ	TIFR2	= 0x17
                                 .equ	TIFR1	= 0x16
                                 .equ	TIFR0	= 0x15
                                 .equ	PORTD	= 0x0b
                                 .equ	DDRD	= 0x0a
                                 .equ	PIND	= 0x09
                                 .equ	PORTC	= 0x08
                                 .equ	DDRC	= 0x07
                                 .equ	PINC	= 0x06
                                 .equ	PORTB	= 0x05
                                 .equ	DDRB	= 0x04
                                 .equ	PINB	= 0x03
                                 
                                 
                                 ; ***** BIT DEFINITIONS **************************************************
                                 
                                 ; ***** USART0 ***********************
                                 ; UDR0 - USART I/O Data Register
                                 .equ	UDR0_0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR0_1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR0_2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR0_3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR0_4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR0_5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR0_6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR0_7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSR0A - USART Control and Status Register A
                                 .equ	MPCM0	= 0	; Multi-processor Communication Mode
                                 .equ	U2X0	= 1	; Double the USART transmission speed
                                 .equ	UPE0	= 2	; Parity Error
                                 .equ	DOR0	= 3	; Data overRun
                                 .equ	FE0	= 4	; Framing Error
                                 .equ	UDRE0	= 5	; USART Data Register Empty
                                 .equ	TXC0	= 6	; USART Transmitt Complete
                                 .equ	RXC0	= 7	; USART Receive Complete
                                 
                                 ; UCSR0B - USART Control and Status Register B
                                 .equ	TXB80	= 0	; Transmit Data Bit 8
                                 .equ	RXB80	= 1	; Receive Data Bit 8
                                 .equ	UCSZ02	= 2	; Character Size
                                 .equ	TXEN0	= 3	; Transmitter Enable
                                 .equ	RXEN0	= 4	; Receiver Enable
                                 .equ	UDRIE0	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE0	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE0	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSR0C - USART Control and Status Register C
                                 .equ	UCPOL0	= 0	; Clock Polarity
                                 .equ	UCSZ00	= 1	; Character Size
                                 .equ	UCPHA0	= UCSZ00	; For compatibility
                                 .equ	UCSZ01	= 2	; Character Size
                                 .equ	UDORD0	= UCSZ01	; For compatibility
                                 .equ	USBS0	= 3	; Stop Bit Select
                                 .equ	UPM00	= 4	; Parity Mode Bit 0
                                 .equ	UPM01	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL00	= 6	; USART Mode Select
                                 .equ	UMSEL0	= UMSEL00	; For compatibility
                                 .equ	UMSEL01	= 7	; USART Mode Select
                                 .equ	UMSEL1	= UMSEL01	; For compatibility
                                 
                                 ; UBRR0H - USART Baud Rate Register High Byte
                                 .equ	UBRR8	= 0	; USART Baud Rate Register bit 8
                                 .equ	UBRR9	= 1	; USART Baud Rate Register bit 9
                                 .equ	UBRR10	= 2	; USART Baud Rate Register bit 10
                                 .equ	UBRR11	= 3	; USART Baud Rate Register bit 11
                                 
                                 ; UBRR0L - USART Baud Rate Register Low Byte
                                 .equ	_UBRR0	= 0	; USART Baud Rate Register bit 0
                                 .equ	_UBRR1	= 1	; USART Baud Rate Register bit 1
                                 .equ	UBRR2	= 2	; USART Baud Rate Register bit 2
                                 .equ	UBRR3	= 3	; USART Baud Rate Register bit 3
                                 .equ	UBRR4	= 4	; USART Baud Rate Register bit 4
                                 .equ	UBRR5	= 5	; USART Baud Rate Register bit 5
                                 .equ	UBRR6	= 6	; USART Baud Rate Register bit 6
                                 .equ	UBRR7	= 7	; USART Baud Rate Register bit 7
                                 
                                 
                                 ; ***** TWI **************************
                                 ; TWAMR - TWI (Slave) Address Mask Register
                                 .equ	TWAM0	= 1	; 
                                 .equ	TWAMR0	= TWAM0	; For compatibility
                                 .equ	TWAM1	= 2	; 
                                 .equ	TWAMR1	= TWAM1	; For compatibility
                                 .equ	TWAM2	= 3	; 
                                 .equ	TWAMR2	= TWAM2	; For compatibility
                                 .equ	TWAM3	= 4	; 
                                 .equ	TWAMR3	= TWAM3	; For compatibility
                                 .equ	TWAM4	= 5	; 
                                 .equ	TWAMR4	= TWAM4	; For compatibility
                                 .equ	TWAM5	= 6	; 
                                 .equ	TWAMR5	= TWAM5	; For compatibility
                                 .equ	TWAM6	= 7	; 
                                 .equ	TWAMR6	= TWAM6	; For compatibility
                                 
                                 ; TWBR - TWI Bit Rate register
                                 .equ	TWBR0	= 0	; 
                                 .equ	TWBR1	= 1	; 
                                 .equ	TWBR2	= 2	; 
                                 .equ	TWBR3	= 3	; 
                                 .equ	TWBR4	= 4	; 
                                 .equ	TWBR5	= 5	; 
                                 .equ	TWBR6	= 6	; 
                                 .equ	TWBR7	= 7	; 
                                 
                                 ; TWCR - TWI Control Register
                                 .equ	TWIE	= 0	; TWI Interrupt Enable
                                 .equ	TWEN	= 2	; TWI Enable Bit
                                 .equ	TWWC	= 3	; TWI Write Collition Flag
                                 .equ	TWSTO	= 4	; TWI Stop Condition Bit
                                 .equ	TWSTA	= 5	; TWI Start Condition Bit
                                 .equ	TWEA	= 6	; TWI Enable Acknowledge Bit
                                 .equ	TWINT	= 7	; TWI Interrupt Flag
                                 
                                 ; TWSR - TWI Status Register
                                 .equ	TWPS0	= 0	; TWI Prescaler
                                 .equ	TWPS1	= 1	; TWI Prescaler
                                 .equ	TWS3	= 3	; TWI Status
                                 .equ	TWS4	= 4	; TWI Status
                                 .equ	TWS5	= 5	; TWI Status
                                 .equ	TWS6	= 6	; TWI Status
                                 .equ	TWS7	= 7	; TWI Status
                                 
                                 ; TWDR - TWI Data register
                                 .equ	TWD0	= 0	; TWI Data Register Bit 0
                                 .equ	TWD1	= 1	; TWI Data Register Bit 1
                                 .equ	TWD2	= 2	; TWI Data Register Bit 2
                                 .equ	TWD3	= 3	; TWI Data Register Bit 3
                                 .equ	TWD4	= 4	; TWI Data Register Bit 4
                                 .equ	TWD5	= 5	; TWI Data Register Bit 5
                                 .equ	TWD6	= 6	; TWI Data Register Bit 6
                                 .equ	TWD7	= 7	; TWI Data Register Bit 7
                                 
                                 ; TWAR - TWI (Slave) Address register
                                 .equ	TWGCE	= 0	; TWI General Call Recognition Enable Bit
                                 .equ	TWA0	= 1	; TWI (Slave) Address register Bit 0
                                 .equ	TWA1	= 2	; TWI (Slave) Address register Bit 1
                                 .equ	TWA2	= 3	; TWI (Slave) Address register Bit 2
                                 .equ	TWA3	= 4	; TWI (Slave) Address register Bit 3
                                 .equ	TWA4	= 5	; TWI (Slave) Address register Bit 4
                                 .equ	TWA5	= 6	; TWI (Slave) Address register Bit 5
                                 .equ	TWA6	= 7	; TWI (Slave) Address register Bit 6
                                 
                                 
                                 ; ***** TIMER_COUNTER_1 **************
                                 ; TIMSK1 - Timer/Counter Interrupt Mask Register
                                 .equ	TOIE1	= 0	; Timer/Counter1 Overflow Interrupt Enable
                                 .equ	OCIE1A	= 1	; Timer/Counter1 Output CompareA Match Interrupt Enable
                                 .equ	OCIE1B	= 2	; Timer/Counter1 Output CompareB Match Interrupt Enable
                                 .equ	ICIE1	= 5	; Timer/Counter1 Input Capture Interrupt Enable
                                 
                                 ; TIFR1 - Timer/Counter Interrupt Flag register
                                 .equ	TOV1	= 0	; Timer/Counter1 Overflow Flag
                                 .equ	OCF1A	= 1	; Output Compare Flag 1A
                                 .equ	OCF1B	= 2	; Output Compare Flag 1B
                                 .equ	ICF1	= 5	; Input Capture Flag 1
                                 
                                 ; TCCR1A - Timer/Counter1 Control Register A
                                 .equ	WGM10	= 0	; Waveform Generation Mode
                                 .equ	WGM11	= 1	; Waveform Generation Mode
                                 .equ	COM1B0	= 4	; Compare Output Mode 1B, bit 0
                                 .equ	COM1B1	= 5	; Compare Output Mode 1B, bit 1
                                 .equ	COM1A0	= 6	; Comparet Ouput Mode 1A, bit 0
                                 .equ	COM1A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR1B - Timer/Counter1 Control Register B
                                 .equ	CS10	= 0	; Prescaler source of Timer/Counter 1
                                 .equ	CS11	= 1	; Prescaler source of Timer/Counter 1
                                 .equ	CS12	= 2	; Prescaler source of Timer/Counter 1
                                 .equ	WGM12	= 3	; Waveform Generation Mode
                                 .equ	WGM13	= 4	; Waveform Generation Mode
                                 .equ	ICES1	= 6	; Input Capture 1 Edge Select
                                 .equ	ICNC1	= 7	; Input Capture 1 Noise Canceler
                                 
                                 ; TCCR1C - Timer/Counter1 Control Register C
                                 .equ	FOC1B	= 6	; 
                                 .equ	FOC1A	= 7	; 
                                 
                                 ; GTCCR - General Timer/Counter Control Register
                                 .equ	PSRSYNC	= 0	; Prescaler Reset Timer/Counter1 and Timer/Counter0
                                 .equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** TIMER_COUNTER_2 **************
                                 ; TIMSK2 - Timer/Counter Interrupt Mask register
                                 .equ	TOIE2	= 0	; Timer/Counter2 Overflow Interrupt Enable
                                 .equ	TOIE2A	= TOIE2	; For compatibility
                                 .equ	OCIE2A	= 1	; Timer/Counter2 Output Compare Match A Interrupt Enable
                                 .equ	OCIE2B	= 2	; Timer/Counter2 Output Compare Match B Interrupt Enable
                                 
                                 ; TIFR2 - Timer/Counter Interrupt Flag Register
                                 .equ	TOV2	= 0	; Timer/Counter2 Overflow Flag
                                 .equ	OCF2A	= 1	; Output Compare Flag 2A
                                 .equ	OCF2B	= 2	; Output Compare Flag 2B
                                 
                                 ; TCCR2A - Timer/Counter2 Control Register A
                                 .equ	WGM20	= 0	; Waveform Genration Mode
                                 .equ	WGM21	= 1	; Waveform Genration Mode
                                 .equ	COM2B0	= 4	; Compare Output Mode bit 0
                                 .equ	COM2B1	= 5	; Compare Output Mode bit 1
                                 .equ	COM2A0	= 6	; Compare Output Mode bit 1
                                 .equ	COM2A1	= 7	; Compare Output Mode bit 1
                                 
                                 ; TCCR2B - Timer/Counter2 Control Register B
                                 .equ	CS20	= 0	; Clock Select bit 0
                                 .equ	CS21	= 1	; Clock Select bit 1
                                 .equ	CS22	= 2	; Clock Select bit 2
                                 .equ	WGM22	= 3	; Waveform Generation Mode
                                 .equ	FOC2B	= 6	; Force Output Compare B
                                 .equ	FOC2A	= 7	; Force Output Compare A
                                 
                                 ; TCNT2 - Timer/Counter2
                                 .equ	TCNT2_0	= 0	; Timer/Counter 2 bit 0
                                 .equ	TCNT2_1	= 1	; Timer/Counter 2 bit 1
                                 .equ	TCNT2_2	= 2	; Timer/Counter 2 bit 2
                                 .equ	TCNT2_3	= 3	; Timer/Counter 2 bit 3
                                 .equ	TCNT2_4	= 4	; Timer/Counter 2 bit 4
                                 .equ	TCNT2_5	= 5	; Timer/Counter 2 bit 5
                                 .equ	TCNT2_6	= 6	; Timer/Counter 2 bit 6
                                 .equ	TCNT2_7	= 7	; Timer/Counter 2 bit 7
                                 
                                 ; OCR2A - Timer/Counter2 Output Compare Register A
                                 .equ	OCR2A_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                                 .equ	OCR2A_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                                 .equ	OCR2A_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                                 .equ	OCR2A_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                                 .equ	OCR2A_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                                 .equ	OCR2A_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                                 .equ	OCR2A_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                                 .equ	OCR2A_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                                 
                                 ; OCR2B - Timer/Counter2 Output Compare Register B
                                 .equ	OCR2B_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                                 .equ	OCR2B_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                                 .equ	OCR2B_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                                 .equ	OCR2B_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                                 .equ	OCR2B_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                                 .equ	OCR2B_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                                 .equ	OCR2B_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                                 .equ	OCR2B_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                                 
                                 ; ASSR - Asynchronous Status Register
                                 .equ	TCR2BUB	= 0	; Timer/Counter Control Register2 Update Busy
                                 .equ	TCR2AUB	= 1	; Timer/Counter Control Register2 Update Busy
                                 .equ	OCR2BUB	= 2	; Output Compare Register 2 Update Busy
                                 .equ	OCR2AUB	= 3	; Output Compare Register2 Update Busy
                                 .equ	TCN2UB	= 4	; Timer/Counter2 Update Busy
                                 .equ	AS2	= 5	; Asynchronous Timer/Counter2
                                 .equ	EXCLK	= 6	; Enable External Clock Input
                                 
                                 ; GTCCR - General Timer Counter Control register
                                 .equ	PSRASY	= 1	; Prescaler Reset Timer/Counter2
                                 .equ	PSR2	= PSRASY	; For compatibility
                                 ;.equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** AD_CONVERTER *****************
                                 ; ADMUX - The ADC multiplexer Selection Register
                                 .equ	MUX0	= 0	; Analog Channel and Gain Selection Bits
                                 .equ	MUX1	= 1	; Analog Channel and Gain Selection Bits
                                 .equ	MUX2	= 2	; Analog Channel and Gain Selection Bits
                                 .equ	MUX3	= 3	; Analog Channel and Gain Selection Bits
                                 .equ	ADLAR	= 5	; Left Adjust Result
                                 .equ	REFS0	= 6	; Reference Selection Bit 0
                                 .equ	REFS1	= 7	; Reference Selection Bit 1
                                 
                                 ; ADCSRA - The ADC Control and Status register A
                                 .equ	ADPS0	= 0	; ADC  Prescaler Select Bits
                                 .equ	ADPS1	= 1	; ADC  Prescaler Select Bits
                                 .equ	ADPS2	= 2	; ADC  Prescaler Select Bits
                                 .equ	ADIE	= 3	; ADC Interrupt Enable
                                 .equ	ADIF	= 4	; ADC Interrupt Flag
                                 .equ	ADATE	= 5	; ADC  Auto Trigger Enable
                                 .equ	ADSC	= 6	; ADC Start Conversion
                                 .equ	ADEN	= 7	; ADC Enable
                                 
                                 ; ADCSRB - The ADC Control and Status register B
                                 .equ	ADTS0	= 0	; ADC Auto Trigger Source bit 0
                                 .equ	ADTS1	= 1	; ADC Auto Trigger Source bit 1
                                 .equ	ADTS2	= 2	; ADC Auto Trigger Source bit 2
                                 .equ	ACME	= 6	; 
                                 
                                 ; ADCH - ADC Data Register High Byte
                                 .equ	ADCH0	= 0	; ADC Data Register High Byte Bit 0
                                 .equ	ADCH1	= 1	; ADC Data Register High Byte Bit 1
                                 .equ	ADCH2	= 2	; ADC Data Register High Byte Bit 2
                                 .equ	ADCH3	= 3	; ADC Data Register High Byte Bit 3
                                 .equ	ADCH4	= 4	; ADC Data Register High Byte Bit 4
                                 .equ	ADCH5	= 5	; ADC Data Register High Byte Bit 5
                                 .equ	ADCH6	= 6	; ADC Data Register High Byte Bit 6
                                 .equ	ADCH7	= 7	; ADC Data Register High Byte Bit 7
                                 
                                 ; ADCL - ADC Data Register Low Byte
                                 .equ	ADCL0	= 0	; ADC Data Register Low Byte Bit 0
                                 .equ	ADCL1	= 1	; ADC Data Register Low Byte Bit 1
                                 .equ	ADCL2	= 2	; ADC Data Register Low Byte Bit 2
                                 .equ	ADCL3	= 3	; ADC Data Register Low Byte Bit 3
                                 .equ	ADCL4	= 4	; ADC Data Register Low Byte Bit 4
                                 .equ	ADCL5	= 5	; ADC Data Register Low Byte Bit 5
                                 .equ	ADCL6	= 6	; ADC Data Register Low Byte Bit 6
                                 .equ	ADCL7	= 7	; ADC Data Register Low Byte Bit 7
                                 
                                 ; DIDR0 - Digital Input Disable Register
                                 .equ	ADC0D	= 0	; 
                                 .equ	ADC1D	= 1	; 
                                 .equ	ADC2D	= 2	; 
                                 .equ	ADC3D	= 3	; 
                                 .equ	ADC4D	= 4	; 
                                 .equ	ADC5D	= 5	; 
                                 
                                 
                                 ; ***** ANALOG_COMPARATOR ************
                                 ; ACSR - Analog Comparator Control And Status Register
                                 .equ	ACIS0	= 0	; Analog Comparator Interrupt Mode Select bit 0
                                 .equ	ACIS1	= 1	; Analog Comparator Interrupt Mode Select bit 1
                                 .equ	ACIC	= 2	; Analog Comparator Input Capture Enable
                                 .equ	ACIE	= 3	; Analog Comparator Interrupt Enable
                                 .equ	ACI	= 4	; Analog Comparator Interrupt Flag
                                 .equ	ACO	= 5	; Analog Compare Output
                                 .equ	ACBG	= 6	; Analog Comparator Bandgap Select
                                 .equ	ACD	= 7	; Analog Comparator Disable
                                 
                                 ; DIDR1 - Digital Input Disable Register 1
                                 .equ	AIN0D	= 0	; AIN0 Digital Input Disable
                                 .equ	AIN1D	= 1	; AIN1 Digital Input Disable
                                 
                                 
                                 ; ***** PORTB ************************
                                 ; PORTB - Port B Data Register
                                 .equ	PORTB0	= 0	; Port B Data Register bit 0
                                 .equ	PB0	= 0	; For compatibility
                                 .equ	PORTB1	= 1	; Port B Data Register bit 1
                                 .equ	PB1	= 1	; For compatibility
                                 .equ	PORTB2	= 2	; Port B Data Register bit 2
                                 .equ	PB2	= 2	; For compatibility
                                 .equ	PORTB3	= 3	; Port B Data Register bit 3
                                 .equ	PB3	= 3	; For compatibility
                                 .equ	PORTB4	= 4	; Port B Data Register bit 4
                                 .equ	PB4	= 4	; For compatibility
                                 .equ	PORTB5	= 5	; Port B Data Register bit 5
                                 .equ	PB5	= 5	; For compatibility
                                 .equ	PORTB6	= 6	; Port B Data Register bit 6
                                 .equ	PB6	= 6	; For compatibility
                                 .equ	PORTB7	= 7	; Port B Data Register bit 7
                                 .equ	PB7	= 7	; For compatibility
                                 
                                 ; DDRB - Port B Data Direction Register
                                 .equ	DDB0	= 0	; Port B Data Direction Register bit 0
                                 .equ	DDB1	= 1	; Port B Data Direction Register bit 1
                                 .equ	DDB2	= 2	; Port B Data Direction Register bit 2
                                 .equ	DDB3	= 3	; Port B Data Direction Register bit 3
                                 .equ	DDB4	= 4	; Port B Data Direction Register bit 4
                                 .equ	DDB5	= 5	; Port B Data Direction Register bit 5
                                 .equ	DDB6	= 6	; Port B Data Direction Register bit 6
                                 .equ	DDB7	= 7	; Port B Data Direction Register bit 7
                                 
                                 ; PINB - Port B Input Pins
                                 .equ	PINB0	= 0	; Port B Input Pins bit 0
                                 .equ	PINB1	= 1	; Port B Input Pins bit 1
                                 .equ	PINB2	= 2	; Port B Input Pins bit 2
                                 .equ	PINB3	= 3	; Port B Input Pins bit 3
                                 .equ	PINB4	= 4	; Port B Input Pins bit 4
                                 .equ	PINB5	= 5	; Port B Input Pins bit 5
                                 .equ	PINB6	= 6	; Port B Input Pins bit 6
                                 .equ	PINB7	= 7	; Port B Input Pins bit 7
                                 
                                 
                                 ; ***** PORTC ************************
                                 ; PORTC - Port C Data Register
                                 .equ	PORTC0	= 0	; Port C Data Register bit 0
                                 .equ	PC0	= 0	; For compatibility
                                 .equ	PORTC1	= 1	; Port C Data Register bit 1
                                 .equ	PC1	= 1	; For compatibility
                                 .equ	PORTC2	= 2	; Port C Data Register bit 2
                                 .equ	PC2	= 2	; For compatibility
                                 .equ	PORTC3	= 3	; Port C Data Register bit 3
                                 .equ	PC3	= 3	; For compatibility
                                 .equ	PORTC4	= 4	; Port C Data Register bit 4
                                 .equ	PC4	= 4	; For compatibility
                                 .equ	PORTC5	= 5	; Port C Data Register bit 5
                                 .equ	PC5	= 5	; For compatibility
                                 .equ	PORTC6	= 6	; Port C Data Register bit 6
                                 .equ	PC6	= 6	; For compatibility
                                 
                                 ; DDRC - Port C Data Direction Register
                                 .equ	DDC0	= 0	; Port C Data Direction Register bit 0
                                 .equ	DDC1	= 1	; Port C Data Direction Register bit 1
                                 .equ	DDC2	= 2	; Port C Data Direction Register bit 2
                                 .equ	DDC3	= 3	; Port C Data Direction Register bit 3
                                 .equ	DDC4	= 4	; Port C Data Direction Register bit 4
                                 .equ	DDC5	= 5	; Port C Data Direction Register bit 5
                                 .equ	DDC6	= 6	; Port C Data Direction Register bit 6
                                 
                                 ; PINC - Port C Input Pins
                                 .equ	PINC0	= 0	; Port C Input Pins bit 0
                                 .equ	PINC1	= 1	; Port C Input Pins bit 1
                                 .equ	PINC2	= 2	; Port C Input Pins bit 2
                                 .equ	PINC3	= 3	; Port C Input Pins bit 3
                                 .equ	PINC4	= 4	; Port C Input Pins bit 4
                                 .equ	PINC5	= 5	; Port C Input Pins bit 5
                                 .equ	PINC6	= 6	; Port C Input Pins bit 6
                                 
                                 
                                 ; ***** PORTD ************************
                                 ; PORTD - Port D Data Register
                                 .equ	PORTD0	= 0	; Port D Data Register bit 0
                                 .equ	PD0	= 0	; For compatibility
                                 .equ	PORTD1	= 1	; Port D Data Register bit 1
                                 .equ	PD1	= 1	; For compatibility
                                 .equ	PORTD2	= 2	; Port D Data Register bit 2
                                 .equ	PD2	= 2	; For compatibility
                                 .equ	PORTD3	= 3	; Port D Data Register bit 3
                                 .equ	PD3	= 3	; For compatibility
                                 .equ	PORTD4	= 4	; Port D Data Register bit 4
                                 .equ	PD4	= 4	; For compatibility
                                 .equ	PORTD5	= 5	; Port D Data Register bit 5
                                 .equ	PD5	= 5	; For compatibility
                                 .equ	PORTD6	= 6	; Port D Data Register bit 6
                                 .equ	PD6	= 6	; For compatibility
                                 .equ	PORTD7	= 7	; Port D Data Register bit 7
                                 .equ	PD7	= 7	; For compatibility
                                 
                                 ; DDRD - Port D Data Direction Register
                                 .equ	DDD0	= 0	; Port D Data Direction Register bit 0
                                 .equ	DDD1	= 1	; Port D Data Direction Register bit 1
                                 .equ	DDD2	= 2	; Port D Data Direction Register bit 2
                                 .equ	DDD3	= 3	; Port D Data Direction Register bit 3
                                 .equ	DDD4	= 4	; Port D Data Direction Register bit 4
                                 .equ	DDD5	= 5	; Port D Data Direction Register bit 5
                                 .equ	DDD6	= 6	; Port D Data Direction Register bit 6
                                 .equ	DDD7	= 7	; Port D Data Direction Register bit 7
                                 
                                 ; PIND - Port D Input Pins
                                 .equ	PIND0	= 0	; Port D Input Pins bit 0
                                 .equ	PIND1	= 1	; Port D Input Pins bit 1
                                 .equ	PIND2	= 2	; Port D Input Pins bit 2
                                 .equ	PIND3	= 3	; Port D Input Pins bit 3
                                 .equ	PIND4	= 4	; Port D Input Pins bit 4
                                 .equ	PIND5	= 5	; Port D Input Pins bit 5
                                 .equ	PIND6	= 6	; Port D Input Pins bit 6
                                 .equ	PIND7	= 7	; Port D Input Pins bit 7
                                 
                                 
                                 ; ***** TIMER_COUNTER_0 **************
                                 ; TIMSK0 - Timer/Counter0 Interrupt Mask Register
                                 .equ	TOIE0	= 0	; Timer/Counter0 Overflow Interrupt Enable
                                 .equ	OCIE0A	= 1	; Timer/Counter0 Output Compare Match A Interrupt Enable
                                 .equ	OCIE0B	= 2	; Timer/Counter0 Output Compare Match B Interrupt Enable
                                 
                                 ; TIFR0 - Timer/Counter0 Interrupt Flag register
                                 .equ	TOV0	= 0	; Timer/Counter0 Overflow Flag
                                 .equ	OCF0A	= 1	; Timer/Counter0 Output Compare Flag 0A
                                 .equ	OCF0B	= 2	; Timer/Counter0 Output Compare Flag 0B
                                 
                                 ; TCCR0A - Timer/Counter  Control Register A
                                 .equ	WGM00	= 0	; Waveform Generation Mode
                                 .equ	WGM01	= 1	; Waveform Generation Mode
                                 .equ	COM0B0	= 4	; Compare Output Mode, Fast PWm
                                 .equ	COM0B1	= 5	; Compare Output Mode, Fast PWm
                                 .equ	COM0A0	= 6	; Compare Output Mode, Phase Correct PWM Mode
                                 .equ	COM0A1	= 7	; Compare Output Mode, Phase Correct PWM Mode
                                 
                                 ; TCCR0B - Timer/Counter Control Register B
                                 .equ	CS00	= 0	; Clock Select
                                 .equ	CS01	= 1	; Clock Select
                                 .equ	CS02	= 2	; Clock Select
                                 .equ	WGM02	= 3	; 
                                 .equ	FOC0B	= 6	; Force Output Compare B
                                 .equ	FOC0A	= 7	; Force Output Compare A
                                 
                                 ; TCNT0 - Timer/Counter0
                                 .equ	TCNT0_0	= 0	; 
                                 .equ	TCNT0_1	= 1	; 
                                 .equ	TCNT0_2	= 2	; 
                                 .equ	TCNT0_3	= 3	; 
                                 .equ	TCNT0_4	= 4	; 
                                 .equ	TCNT0_5	= 5	; 
                                 .equ	TCNT0_6	= 6	; 
                                 .equ	TCNT0_7	= 7	; 
                                 
                                 ; OCR0A - Timer/Counter0 Output Compare Register
                                 .equ	OCR0A_0	= 0	; 
                                 .equ	OCR0A_1	= 1	; 
                                 .equ	OCR0A_2	= 2	; 
                                 .equ	OCR0A_3	= 3	; 
                                 .equ	OCR0A_4	= 4	; 
                                 .equ	OCR0A_5	= 5	; 
                                 .equ	OCR0A_6	= 6	; 
                                 .equ	OCR0A_7	= 7	; 
                                 
                                 ; OCR0B - Timer/Counter0 Output Compare Register
                                 .equ	OCR0B_0	= 0	; 
                                 .equ	OCR0B_1	= 1	; 
                                 .equ	OCR0B_2	= 2	; 
                                 .equ	OCR0B_3	= 3	; 
                                 .equ	OCR0B_4	= 4	; 
                                 .equ	OCR0B_5	= 5	; 
                                 .equ	OCR0B_6	= 6	; 
                                 .equ	OCR0B_7	= 7	; 
                                 
                                 ; GTCCR - General Timer/Counter Control Register
                                 ;.equ	PSRSYNC	= 0	; Prescaler Reset Timer/Counter1 and Timer/Counter0
                                 .equ	PSR10	= PSRSYNC	; For compatibility
                                 ;.equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** EXTERNAL_INTERRUPT ***********
                                 ; EICRA - External Interrupt Control Register
                                 .equ	ISC00	= 0	; External Interrupt Sense Control 0 Bit 0
                                 .equ	ISC01	= 1	; External Interrupt Sense Control 0 Bit 1
                                 .equ	ISC10	= 2	; External Interrupt Sense Control 1 Bit 0
                                 .equ	ISC11	= 3	; External Interrupt Sense Control 1 Bit 1
                                 
                                 ; EIMSK - External Interrupt Mask Register
                                 .equ	INT0	= 0	; External Interrupt Request 0 Enable
                                 .equ	INT1	= 1	; External Interrupt Request 1 Enable
                                 
                                 ; EIFR - External Interrupt Flag Register
                                 .equ	INTF0	= 0	; External Interrupt Flag 0
                                 .equ	INTF1	= 1	; External Interrupt Flag 1
                                 
                                 ; PCICR - Pin Change Interrupt Control Register
                                 .equ	PCIE0	= 0	; Pin Change Interrupt Enable 0
                                 .equ	PCIE1	= 1	; Pin Change Interrupt Enable 1
                                 .equ	PCIE2	= 2	; Pin Change Interrupt Enable 2
                                 
                                 ; PCMSK2 - Pin Change Mask Register 2
                                 .equ	PCINT16	= 0	; Pin Change Enable Mask 16
                                 .equ	PCINT17	= 1	; Pin Change Enable Mask 17
                                 .equ	PCINT18	= 2	; Pin Change Enable Mask 18
                                 .equ	PCINT19	= 3	; Pin Change Enable Mask 19
                                 .equ	PCINT20	= 4	; Pin Change Enable Mask 20
                                 .equ	PCINT21	= 5	; Pin Change Enable Mask 21
                                 .equ	PCINT22	= 6	; Pin Change Enable Mask 22
                                 .equ	PCINT23	= 7	; Pin Change Enable Mask 23
                                 
                                 ; PCMSK1 - Pin Change Mask Register 1
                                 .equ	PCINT8	= 0	; Pin Change Enable Mask 8
                                 .equ	PCINT9	= 1	; Pin Change Enable Mask 9
                                 .equ	PCINT10	= 2	; Pin Change Enable Mask 10
                                 .equ	PCINT11	= 3	; Pin Change Enable Mask 11
                                 .equ	PCINT12	= 4	; Pin Change Enable Mask 12
                                 .equ	PCINT13	= 5	; Pin Change Enable Mask 13
                                 .equ	PCINT14	= 6	; Pin Change Enable Mask 14
                                 
                                 ; PCMSK0 - Pin Change Mask Register 0
                                 .equ	PCINT0	= 0	; Pin Change Enable Mask 0
                                 .equ	PCINT1	= 1	; Pin Change Enable Mask 1
                                 .equ	PCINT2	= 2	; Pin Change Enable Mask 2
                                 .equ	PCINT3	= 3	; Pin Change Enable Mask 3
                                 .equ	PCINT4	= 4	; Pin Change Enable Mask 4
                                 .equ	PCINT5	= 5	; Pin Change Enable Mask 5
                                 .equ	PCINT6	= 6	; Pin Change Enable Mask 6
                                 .equ	PCINT7	= 7	; Pin Change Enable Mask 7
                                 
                                 ; PCIFR - Pin Change Interrupt Flag Register
                                 .equ	PCIF0	= 0	; Pin Change Interrupt Flag 0
                                 .equ	PCIF1	= 1	; Pin Change Interrupt Flag 1
                                 .equ	PCIF2	= 2	; Pin Change Interrupt Flag 2
                                 
                                 
                                 ; ***** SPI **************************
                                 ; SPDR - SPI Data Register
                                 .equ	SPDR0	= 0	; SPI Data Register bit 0
                                 .equ	SPDR1	= 1	; SPI Data Register bit 1
                                 .equ	SPDR2	= 2	; SPI Data Register bit 2
                                 .equ	SPDR3	= 3	; SPI Data Register bit 3
                                 .equ	SPDR4	= 4	; SPI Data Register bit 4
                                 .equ	SPDR5	= 5	; SPI Data Register bit 5
                                 .equ	SPDR6	= 6	; SPI Data Register bit 6
                                 .equ	SPDR7	= 7	; SPI Data Register bit 7
                                 
                                 ; SPSR - SPI Status Register
                                 .equ	SPI2X	= 0	; Double SPI Speed Bit
                                 .equ	WCOL	= 6	; Write Collision Flag
                                 .equ	SPIF	= 7	; SPI Interrupt Flag
                                 
                                 ; SPCR - SPI Control Register
                                 .equ	SPR0	= 0	; SPI Clock Rate Select 0
                                 .equ	SPR1	= 1	; SPI Clock Rate Select 1
                                 .equ	CPHA	= 2	; Clock Phase
                                 .equ	CPOL	= 3	; Clock polarity
                                 .equ	MSTR	= 4	; Master/Slave Select
                                 .equ	DORD	= 5	; Data Order
                                 .equ	SPE	= 6	; SPI Enable
                                 .equ	SPIE	= 7	; SPI Interrupt Enable
                                 
                                 
                                 ; ***** WATCHDOG *********************
                                 ; WDTCSR - Watchdog Timer Control Register
                                 .equ	WDP0	= 0	; Watch Dog Timer Prescaler bit 0
                                 .equ	WDP1	= 1	; Watch Dog Timer Prescaler bit 1
                                 .equ	WDP2	= 2	; Watch Dog Timer Prescaler bit 2
                                 .equ	WDE	= 3	; Watch Dog Enable
                                 .equ	WDCE	= 4	; Watchdog Change Enable
                                 .equ	WDP3	= 5	; Watchdog Timer Prescaler Bit 3
                                 .equ	WDIE	= 6	; Watchdog Timeout Interrupt Enable
                                 .equ	WDIF	= 7	; Watchdog Timeout Interrupt Flag
                                 
                                 
                                 ; ***** CPU **************************
                                 ; SREG - Status Register
                                 .equ	SREG_C	= 0	; Carry Flag
                                 .equ	SREG_Z	= 1	; Zero Flag
                                 .equ	SREG_N	= 2	; Negative Flag
                                 .equ	SREG_V	= 3	; Two's Complement Overflow Flag
                                 .equ	SREG_S	= 4	; Sign Bit
                                 .equ	SREG_H	= 5	; Half Carry Flag
                                 .equ	SREG_T	= 6	; Bit Copy Storage
                                 .equ	SREG_I	= 7	; Global Interrupt Enable
                                 
                                 ; OSCCAL - Oscillator Calibration Value
                                 .equ	CAL0	= 0	; Oscillator Calibration Value Bit0
                                 .equ	CAL1	= 1	; Oscillator Calibration Value Bit1
                                 .equ	CAL2	= 2	; Oscillator Calibration Value Bit2
                                 .equ	CAL3	= 3	; Oscillator Calibration Value Bit3
                                 .equ	CAL4	= 4	; Oscillator Calibration Value Bit4
                                 .equ	CAL5	= 5	; Oscillator Calibration Value Bit5
                                 .equ	CAL6	= 6	; Oscillator Calibration Value Bit6
                                 .equ	CAL7	= 7	; Oscillator Calibration Value Bit7
                                 
                                 ; CLKPR - Clock Prescale Register
                                 .equ	CLKPS0	= 0	; Clock Prescaler Select Bit 0
                                 .equ	CLKPS1	= 1	; Clock Prescaler Select Bit 1
                                 .equ	CLKPS2	= 2	; Clock Prescaler Select Bit 2
                                 .equ	CLKPS3	= 3	; Clock Prescaler Select Bit 3
                                 .equ	CLKPCE	= 7	; Clock Prescaler Change Enable
                                 
                                 ; SPMCSR - Store Program Memory Control and Status Register
                                 .equ    SELFPRGEN = 0; Added for backwards compatibility
                                 .equ	SPMEN	= 0	; Store Program Memory
                                 .equ	PGERS	= 1	; Page Erase
                                 .equ	PGWRT	= 2	; Page Write
                                 .equ	BLBSET	= 3	; Boot Lock Bit Set
                                 .equ	RWWSRE	= 4	; Read-While-Write section read enable
                                 .equ    SIGRD   = 5 ; Signature Row Read
                                 .equ	RWWSB	= 6	; Read-While-Write Section Busy
                                 .equ	SPMIE	= 7	; SPM Interrupt Enable
                                 
                                 ; MCUCR - MCU Control Register
                                 .equ	IVCE	= 0	; 
                                 .equ	IVSEL	= 1	; 
                                 .equ	PUD	= 4	; 
                                 .equ	BODSE	= 5	; BOD Sleep Enable
                                 .equ	BODS	= 6	; BOD Sleep
                                 
                                 ; MCUSR - MCU Status Register
                                 .equ	PORF	= 0	; Power-on reset flag
                                 .equ	EXTRF	= 1	; External Reset Flag
                                 .equ	EXTREF	= EXTRF	; For compatibility
                                 .equ	BORF	= 2	; Brown-out Reset Flag
                                 .equ	WDRF	= 3	; Watchdog Reset Flag
                                 
                                 ; SMCR - Sleep Mode Control Register
                                 .equ	SE	= 0	; Sleep Enable
                                 .equ	SM0	= 1	; Sleep Mode Select Bit 0
                                 .equ	SM1	= 2	; Sleep Mode Select Bit 1
                                 .equ	SM2	= 3	; Sleep Mode Select Bit 2
                                 
                                 ; GPIOR2 - General Purpose I/O Register 2
                                 .equ	GPIOR20	= 0	; 
                                 .equ	GPIOR21	= 1	; 
                                 .equ	GPIOR22	= 2	; 
                                 .equ	GPIOR23	= 3	; 
                                 .equ	GPIOR24	= 4	; 
                                 .equ	GPIOR25	= 5	; 
                                 .equ	GPIOR26	= 6	; 
                                 .equ	GPIOR27	= 7	; 
                                 
                                 ; GPIOR1 - General Purpose I/O Register 1
                                 .equ	GPIOR10	= 0	; 
                                 .equ	GPIOR11	= 1	; 
                                 .equ	GPIOR12	= 2	; 
                                 .equ	GPIOR13	= 3	; 
                                 .equ	GPIOR14	= 4	; 
                                 .equ	GPIOR15	= 5	; 
                                 .equ	GPIOR16	= 6	; 
                                 .equ	GPIOR17	= 7	; 
                                 
                                 ; GPIOR0 - General Purpose I/O Register 0
                                 .equ	GPIOR00	= 0	; 
                                 .equ	GPIOR01	= 1	; 
                                 .equ	GPIOR02	= 2	; 
                                 .equ	GPIOR03	= 3	; 
                                 .equ	GPIOR04	= 4	; 
                                 .equ	GPIOR05	= 5	; 
                                 .equ	GPIOR06	= 6	; 
                                 .equ	GPIOR07	= 7	; 
                                 
                                 ; PRR - Power Reduction Register
                                 .equ	PRADC	= 0	; Power Reduction ADC
                                 .equ	PRUSART0	= 1	; Power Reduction USART
                                 .equ	PRSPI	= 2	; Power Reduction Serial Peripheral Interface
                                 .equ	PRTIM1	= 3	; Power Reduction Timer/Counter1
                                 .equ	PRTIM0	= 5	; Power Reduction Timer/Counter0
                                 .equ	PRTIM2	= 6	; Power Reduction Timer/Counter2
                                 .equ	PRTWI	= 7	; Power Reduction TWI
                                 
                                 
                                 ; ***** EEPROM ***********************
                                 ; EEARL - EEPROM Address Register Low Byte
                                 .equ	EEAR0	= 0	; EEPROM Read/Write Access Bit 0
                                 .equ	EEAR1	= 1	; EEPROM Read/Write Access Bit 1
                                 .equ	EEAR2	= 2	; EEPROM Read/Write Access Bit 2
                                 .equ	EEAR3	= 3	; EEPROM Read/Write Access Bit 3
                                 .equ	EEAR4	= 4	; EEPROM Read/Write Access Bit 4
                                 .equ	EEAR5	= 5	; EEPROM Read/Write Access Bit 5
                                 .equ	EEAR6	= 6	; EEPROM Read/Write Access Bit 6
                                 .equ	EEAR7	= 7	; EEPROM Read/Write Access Bit 7
                                 
                                 ; EEARH - EEPROM Address Register High Byte
                                 .equ	EEAR8	= 0	; EEPROM Read/Write Access Bit 8
                                 .equ	EEAR9	= 1	; EEPROM Read/Write Access Bit 9
                                 
                                 ; EEDR - EEPROM Data Register
                                 .equ	EEDR0	= 0	; EEPROM Data Register bit 0
                                 .equ	EEDR1	= 1	; EEPROM Data Register bit 1
                                 .equ	EEDR2	= 2	; EEPROM Data Register bit 2
                                 .equ	EEDR3	= 3	; EEPROM Data Register bit 3
                                 .equ	EEDR4	= 4	; EEPROM Data Register bit 4
                                 .equ	EEDR5	= 5	; EEPROM Data Register bit 5
                                 .equ	EEDR6	= 6	; EEPROM Data Register bit 6
                                 .equ	EEDR7	= 7	; EEPROM Data Register bit 7
                                 
                                 ; EECR - EEPROM Control Register
                                 .equ	EERE	= 0	; EEPROM Read Enable
                                 .equ	EEPE	= 1	; EEPROM Write Enable
                                 .equ	EEMPE	= 2	; EEPROM Master Write Enable
                                 .equ	EERIE	= 3	; EEPROM Ready Interrupt Enable
                                 .equ	EEPM0	= 4	; EEPROM Programming Mode Bit 0
                                 .equ	EEPM1	= 5	; EEPROM Programming Mode Bit 1
                                 
                                 
                                 
                                 ; ***** LOCKSBITS ********************************************************
                                 .equ	LB1	= 0	; Lock bit
                                 .equ	LB2	= 1	; Lock bit
                                 .equ	BLB01	= 2	; Boot Lock bit
                                 .equ	BLB02	= 3	; Boot Lock bit
                                 .equ	BLB11	= 4	; Boot lock bit
                                 .equ	BLB12	= 5	; Boot lock bit
                                 
                                 
                                 ; ***** FUSES ************************************************************
                                 ; LOW fuse bits
                                 .equ	CKSEL0	= 0	; Select Clock Source
                                 .equ	CKSEL1	= 1	; Select Clock Source
                                 .equ	CKSEL2	= 2	; Select Clock Source
                                 .equ	CKSEL3	= 3	; Select Clock Source
                                 .equ	SUT0	= 4	; Select start-up time
                                 .equ	SUT1	= 5	; Select start-up time
                                 .equ	CKOUT	= 6	; Clock output
                                 .equ	CKDIV8	= 7	; Divide clock by 8
                                 
                                 ; HIGH fuse bits
                                 .equ	BOOTRST	= 0	; Select reset vector
                                 .equ	BOOTSZ0	= 1	; Select boot size
                                 .equ	BOOTSZ1	= 2	; Select boot size
                                 .equ	EESAVE	= 3	; EEPROM memory is preserved through chip erase
                                 .equ	WDTON	= 4	; Watchdog Timer Always On
                                 .equ	SPIEN	= 5	; Enable Serial programming and Data Downloading
                                 .equ	DWEN	= 6	; debugWIRE Enable
                                 .equ	RSTDISBL	= 7	; External reset disable
                                 
                                 ; EXTENDED fuse bits
                                 .equ	BODLEVEL0	= 0	; Brown-out Detector trigger level
                                 .equ	BODLEVEL1	= 1	; Brown-out Detector trigger level
                                 .equ	BODLEVEL2	= 2	; Brown-out Detector trigger level
                                 
                                 
                                 
                                 ; ***** CPU REGISTER DEFINITIONS *****************************************
                                 .def	XH	= r27
                                 .def	XL	= r26
                                 .def	YH	= r29
                                 .def	YL	= r28
                                 .def	ZH	= r31
                                 .def	ZL	= r30
                                 
                                 
                                 
                                 ; ***** DATA MEMORY DECLARATIONS *****************************************
                                 .equ	FLASHEND	= 0x3fff	; Note: Word address
                                 .equ	IOEND	= 0x00ff
                                 .equ	SRAM_START	= 0x0100
                                 .equ	SRAM_SIZE	= 2048
                                 .equ	RAMEND	= 0x08ff
                                 .equ	XRAMEND	= 0x0000
                                 .equ	E2END	= 0x03ff
                                 .equ	EEPROMEND	= 0x03ff
                                 .equ	EEADRBITS	= 10
                                 #pragma AVRPART MEMORY PROG_FLASH 32768
                                 #pragma AVRPART MEMORY EEPROM 1024
                                 #pragma AVRPART MEMORY INT_SRAM SIZE 2048
                                 #pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                                 
                                 
                                 
                                 ; ***** BOOTLOADER DECLARATIONS ******************************************
                                 .equ	NRWW_START_ADDR	= 0x3800
                                 .equ	NRWW_STOP_ADDR	= 0x3fff
                                 .equ	RWW_START_ADDR	= 0x0
                                 .equ	RWW_STOP_ADDR	= 0x37ff
                                 .equ	PAGESIZE	= 64
                                 .equ	FIRSTBOOTSTART	= 0x3f00
                                 .equ	SECONDBOOTSTART	= 0x3e00
                                 .equ	THIRDBOOTSTART	= 0x3c00
                                 .equ	FOURTHBOOTSTART	= 0x3800
                                 .equ	SMALLBOOTSTART	= FIRSTBOOTSTART
                                 .equ	LARGEBOOTSTART	= FOURTHBOOTSTART
                                 
                                 
                                 
                                 ; ***** INTERRUPT VECTORS ************************************************
                                 .equ	INT0addr	= 0x0002	; External Interrupt Request 0
                                 .equ	INT1addr	= 0x0004	; External Interrupt Request 1
                                 .equ	PCI0addr	= 0x0006	; Pin Change Interrupt Request 0
                                 .equ	PCI1addr	= 0x0008	; Pin Change Interrupt Request 0
                                 .equ	PCI2addr	= 0x000a	; Pin Change Interrupt Request 1
                                 .equ	WDTaddr	= 0x000c	; Watchdog Time-out Interrupt
                                 .equ	OC2Aaddr	= 0x000e	; Timer/Counter2 Compare Match A
                                 .equ	OC2Baddr	= 0x0010	; Timer/Counter2 Compare Match A
                                 .equ	OVF2addr	= 0x0012	; Timer/Counter2 Overflow
                                 .equ	ICP1addr	= 0x0014	; Timer/Counter1 Capture Event
                                 .equ	OC1Aaddr	= 0x0016	; Timer/Counter1 Compare Match A
                                 .equ	OC1Baddr	= 0x0018	; Timer/Counter1 Compare Match B
                                 .equ	OVF1addr	= 0x001a	; Timer/Counter1 Overflow
                                 .equ	OC0Aaddr	= 0x001c	; TimerCounter0 Compare Match A
                                 .equ	OC0Baddr	= 0x001e	; TimerCounter0 Compare Match B
                                 .equ	OVF0addr	= 0x0020	; Timer/Couner0 Overflow
                                 .equ	SPIaddr	= 0x0022	; SPI Serial Transfer Complete
                                 .equ	URXCaddr	= 0x0024	; USART Rx Complete
                                 .equ	UDREaddr	= 0x0026	; USART, Data Register Empty
                                 .equ	UTXCaddr	= 0x0028	; USART Tx Complete
                                 .equ	ADCCaddr	= 0x002a	; ADC Conversion Complete
                                 .equ	ERDYaddr	= 0x002c	; EEPROM Ready
                                 .equ	ACIaddr	= 0x002e	; Analog Comparator
                                 .equ	TWIaddr	= 0x0030	; Two-wire Serial Interface
                                 .equ	SPMRaddr	= 0x0032	; Store Program Memory Read
                                 
                                 .equ	INT_VECTORS_SIZE	= 52	; size in words
                                 
                                 #endif  /* _M328PDEF_INC_ */
                                 
                                 ; ***** END OF FILE ******************************************************
                                 
                                 ; 328eForth_ASM.asm
                                 ;
                                 ; Created: 7/5/2022 11:59:37 AM
                                 ; Author : See Below
                                 ; TITLE Atmega328 eForth
                                 
                                 .list
                                 
                                 ;===============================================================
                                 ;	328eForth v2.20, Chen-Hanson Ting, July 2011
                                 ;		Fix error, quit, 2/ and ?stack
                                 ;
                                 ;	328eForth v2.10, Chen-Hanson Ting, March 2011
                                 ;	Adapted from 
                                 ;		86se4th.asm by Richard Haskell 
                                 ;		Amforth by Matthias Trute
                                 ;	Assembled with AVR Studio 4 from Atmel
                                 ;	-Subroutine threaded model
                                 ;	-Uniform byte addressing for flash, RAM and registers
                                 ;	-Ping-pong block buffers for optimal flash programming
                                 ;	-FORTH interpreter & tools are in NRWW flash
                                 ;	-FORTH compiler & user extension are in RWW flash
                                 ;	-No interrupt, no multitasking 
                                 ;	-turnkey capability
                                 ;	-Case insensitive
                                 ;	-9600 baud, 1 start, 8 data, no parity, 1 stop bit
                                 ;	ANS FORTH compatible, but not compliant.
                                 ;
                                 ;	Subroutine threaded eForth; Version. 1.0, 1991 
                                 ;	by Richard E. Haskell
                                 ;	Dept. of Computer Science and Engineering
                                 ;	Oakland University
                                 ;	Rochester, Michigan 48309
                                 ;
                                 ;	eForth 1.0 by Bill Muench and C. H. Ting, 1990
                                 ;	Much of the code is derived from the following sources:
                                 ;	8086 figForth by Thomas Newman, 1981 and Joe smith, 1983
                                 ;	aFORTH by John Rible
                                 ;	bFORTH by Bill Muench
                                 ;
                                 ;	The goal of this implementation is to provide a simple eForth Model
                                 ;	which can be ported easily to many 8, 16, 24 and 32 bit CPU's.
                                 ;	The following attributes make it suitable for CPU's of the '90:
                                 ;
                                 ;	small machine dependent kernel and portable high level code
                                 ;	subroutine threaded code
                                 ;	single code dictionaries
                                 ;	each word record has a link field, a name field and a code field
                                 ;	simple terminal and file interface to host computer
                                 ;	aligned with the proposed ANS Forth Standard
                                 ;	easy upgrade path to optimize for specific CPU
                                 ;	easy mixing of Forth and assembly language
                                 ;	all assembly language tools can be used directly
                                 ;
                                 ;	You are invited to implement this Model on your favorite CPU and
                                 ;	contribute it to the eForth Library for public use. You may use
                                 ;	a portable implementation to advertise more sophisticated and
                                 ;	optimized version for commercial purposes. However, you are
                                 ;	expected to implement the Model faithfully. The eForth Working
                                 ;	Group reserves the right to reject implementation which deviates
                                 ;	significantly from this Model.
                                 ;
                                 ;	Representing the eForth Working Group in the Silicon Valley FIG Chapter.
                                 ;	Send contributions to:
                                 ;
                                 ;	Dr. Chen-Hanson Ting
                                 ;	156 14th Avenue
                                 ;	San Mateo, CA 94402
                                 ;	(650) 571-7639
                                 ;	ting@offete.com
                                 ;
                                 ;===============================================================
                                 
                                 ;; Version control
                                 
                                 .EQU	VER	=	2	;major release version
                                 .EQU	EXT	=	2	;minor extension
                                 
                                 ;; Constants
                                 
                                 .EQU	COMPO	=	$040	;lexicon compile only bit
                                 .EQU	IMEDD	=	$080	;lexicon immediate bit
                                 
                                 .EQU	BASEE	=	16		;default radix
                                 
                                 .EQU	BKSPP	=	8		;back space
                                 .EQU	LF		=	10		;line feed
                                 .EQU	CRR		=	13		;carriage return
                                 
                                 .EQU	RETT	=	$9508
                                 .EQU	CALLL	=	$940E
                                 
                                 ;; Memory allocation for ATmega328P, all byte addresses
                                 ;
                                 ;	Flash memory
                                 ;	$0		Reset and interrupt vectors, RWW section
                                 ;	$100	Initial values for variables
                                 ;	$200	Start of compiler and user words
                                 ;	$7000	Start of interpreter words, NRWW section
                                 ;	$7FFF	End of flash memory
                                 ;
                                 ;	RAM memory
                                 ;	$0		CPU and I/O registers
                                 ;	$100	Variables
                                 ;	$120	Free RAM memory
                                 ;	$160	Initial PAD
                                 ;	$4F0	Top of data stack
                                 ;	$700	Terminal input buffer
                                 ;	$7F0	Top of return stack
                                 ;	$800	Flash buffer 0
                                 ;	$880	Flash buffer 1
                                 ;	$8FF	End of RAM memory
                                 
                                 .EQU	RPP		=	$7F0	;start of return stack (RP0)
                                 .EQU	TIBB	=	$700	;terminal input buffer (TIB)
                                 .EQU	UPP		=	$100	;start of user area (UP0)
                                 .EQU	SPP		=	$6F0	;start of data stack (SP0)
                                 
                                 ;;	Flash programmming
                                 
                                 .EQU	BUF0	=	$800
                                 .EQU	BUF1	=	$880
                                 .EQU	NEWER	=	$11C	;flash pointer
                                 .EQU	OLDER	=	$11E	;flash pointer
                                 ; buffer pointer word format:	dirty,page_addr,cell_addr,buf?
                                 
                                 ;; Initialize assembly variable
                                 
                                 .SET _LINK		=	0		;init a null link
                                 
                                 ;	Compile a code definition header.
                                 
                                 .MACRO	CODE				;;LEX,NAME 
                                 	.DW		_LINK*2			;;link pointer
                                 	.SET _LINK	=	pc		;;link points to a name string
                                 	.DB		@0,@1
                                 	.ENDM
                                 
                                 ;	Colon header is identical to code header.
                                 
                                 .MACRO	COLON				;;LEX,NAME,LABEL
                                 	.DW		_LINK*2			;;link pointer
                                 	.SET _LINK	=	pc		;;link points to a name string
                                 	.DB		@0,@1
                                 	.ENDM
                                 
                                 ;; Macros defined by amForth
                                 
                                 .DEF zerol = r2
                                 .DEF zeroh = r3
                                 .DEF temp4 = r14
                                 .DEF temp5 = r15
                                 .DEF temp0 = r16
                                 .DEF temp1 = r17
                                 .DEF temp2 = r18
                                 .DEF temp3 = r19
                                 .DEF temp6 = r20
                                 .DEF temp7 = r21
                                 .DEF tosl = r24
                                 .DEF tosh = r25
                                 
                                 .macro loadtos
                                 	ld tosl, Y+
                                 	ld tosh, Y+
                                 .endmacro
                                 
                                 .macro savetos
                                 	st -Y, tosh
                                 	st -Y, tosl
                                 .endmacro
                                 
                                 .macro in_
                                 .if (@1 < $40)
                                   	in @0,@1
                                 .else
                                   	lds @0,@1
                                 .endif
                                 .endmacro
                                 
                                 .macro out_
                                 .if (@0 < $40)
                                   	out @0,@1
                                 .else
                                   	sts @0,@1
                                 .endif
                                 .endmacro
                                 
                                 .macro readflashcell
                                 	lsl zl
                                 	rol zh
                                 	lpm @0, Z+
                                 	lpm @1, Z+
                                 .endmacro
                                 
                                 .macro writeflashcell
                                 	lsl zl
                                 	rol zh
                                 .endmacro
                                 
                                 ;; Main entry points and COLD start data
                                 
                                 	.CSEG
                                 	.ORG	0
000000 940c 3800                 	JMP		ORIG
                                 
                                 	.ORG	$80		;byte address $100, copy to ram on boot, 
                                 					;saved from ram for turnkey system
                                 	
                                 UZERO:	
000080 7ed0                      	.DW		HI*2	;'BOOT
000081 0000                      	.DW		0		;reserved
000082 0010                      	.DW		BASEE	;BASE
000083 0000                      	.DW		0		;tmp
000084 0000                      	.DW		0		;SPAN
000085 0000                      	.DW		0		;>IN
000086 0000                      	.DW		0		;#TIB
000087 0700                      	.DW		TIBB	;TIB
000088 7d28                      	.DW		INTER*2	;'EVAL
000089 0000                      	.DW		0		;HLD
00008a 067e                      	.DW		LASTN	;CONTEXT pointer
00008b 0696                      	.DW		CTOP	;CP
00008c 0140                      	.DW		DTOP	;DP
00008d 067e                      	.DW		LASTN	;LAST
00008e 6f00                      	.DW		$6F00	;PTR0 to BUF0
00008f 6f81                      	.DW		$6F81	;PTR1 to BUF1
                                 ULAST:
                                 
                                 	.ORG	$3800	;byte address $7000
                                 ORIG:	
003800 b6a4                      	in_ 	r10, MCUSR
003801 24bb                      	clr 	r11
003802 2422                      	clr 	zerol
003803 2433                      	clr 	zeroh
003804 be24                      	out_ 	MCUSR, zerol
                                 	; init return stack pointer
003805 efa0                      	ldi 	xl,low(RPP)
003806 bfad                      	out_ 	SPL,xl
003807 e0b7                      	ldi 	xh,high(RPP)
003808 bfbe                      	out_ 	SPH,xh
                                 	; init parameter stack pointer
003809 efc0                      	ldi 	yl,low(SPP)
00380a e0d6                      	ldi 	yh,high(SPP)
                                 	; jump to Forth starting word
00380b 940c 3f77                 	jmp 	COLD
                                 
                                 ;; Device dependent I/O
                                 
                                 ;   ?RX	( -- c T | F )
                                 ;	Return input character and true, or a false if no input.
                                 
00380d 0000
00380e 3f04
00380f 454b
c:\users\rgeorge\Documents\Atmel Studio\7.0\328eForth_ASM\328eForth_ASM\main.asm(139): warning: .cseg .db misalignment - padding zero byte
c:\users\rgeorge\Documents\Atmel Studio\7.0\328eForth_ASM\328eForth_ASM\main.asm(254): macro 'CODE' called here
003810 0059                      	CODE	4,"?KEY"
                                 QRX:
                                 QKEY:
003811 939a
003812 938a                      	savetos
003813 2788                      	clr 	tosl
003814 2799                      	clr 	tosh
003815 01c1                      	movw	tosl,zerol
003816 91a0 00c0                 	in_		xl,UCSR0A
003818 ffa7                      	sbrs	xl,7
003819 9508                      	ret
00381a 9180 00c6                 	in_		tosl,UDR0
00381c 939a
00381d 938a                      	savetos
00381e ef8f                      	ser		tosl
00381f ef9f                      	ser		tosh
003820 9508                      	ret
                                 
                                 ;   TX!	( c -- )
                                 ;	Send character c to the output device.
                                 
003821 701c
003822 4504
003823 494d
c:\users\rgeorge\Documents\Atmel Studio\7.0\328eForth_ASM\328eForth_ASM\main.asm(139): warning: .cseg .db misalignment - padding zero byte
c:\users\rgeorge\Documents\Atmel Studio\7.0\328eForth_ASM\328eForth_ASM\main.asm(273): macro 'CODE' called here
003824 0054                      	CODE	4,"EMIT"
                                 EMIT:
                                 TXSTO:	
003825 91a0 00c0                 	in_		xl,UCSR0A
003827 ffa5                      	sbrs	xl,5
003828 cffc                      	rJMP	TXSTO
003829 9380 00c6                 	out_	UDR0,tosl
00382b 9189
00382c 9199                      	loadtos
00382d 9508                      	ret
                                 
                                 ;   !IO	( -- )
                                 ;	Initialize the serial I/O devices.
                                 
                                 ;	CODE	3,"!IO"
                                 STOIO:
00382e e3a3                      	ldi		xl,$33	;19200 baud
                                 ;	ldi		xl,$66	;9600 baud
00382f 93a0 00c4                 	out_	UBRR0L,xl
003831 27aa                      	clr		xl
003832 93a0 00c5                 	out_	UBRR0H,xl
003834 e1a8                      	ldi		xl,$18	;enable TX and RX
003835 93a0 00c1                 	out_	UCSR0B,xl
003837 e0a6                      	ldi		xl,6	;8 data bits
003838 93a0 00c2                 	out_	UCSR0C,xl
00383a 9508                      	RET
                                 
                                 ;; The kernel
                                 
                                 ;   doLIT	( -- w )
                                 ;	Push an inline literal.
                                 
                                 ;	CODE	COMPO+5,"doLIT"
                                 DOLIT:
00383b 939a
00383c 938a                      	savetos
00383d 91ff                      	pop		zh
00383e 91ef                      	pop		zl
00383f 0fee
003840 1fff
003841 9185
003842 9195                      	readflashcell tosl,tosh
003843 95f7                      	ror		zh
003844 95e7                      	ror		zl
003845 93ef                      	push	zl
003846 93ff                      	push	zh
003847 9508                      	ret
                                 
                                 ;   next	( -- )
                                 ;	Run time code for the single index loop.
                                 
                                 ;	CODE	COMPO+4,"next"
                                 DONXT:
003848 91ff                      	POP		zh	;ret addr
003849 91ef                      	POP		zl	;
00384a 91bf                      	pop		xh	;count
00384b 91af                      	pop		xl
00384c 9711                      	sbiw	xl, 1
00384d f424                      	brge	NEXT1
00384e 9631                      	adiw	zl,1
00384f 93ef                      	push	zl
003850 93ff                      	push	zh
003851 9508                      	ret
                                 NEXT1:	
003852 93af                      	push	xl	;push count back
003853 93bf                      	push	xh	
003854 0fee
003855 1fff
003856 91a5
003857 91b5                      	readflashcell	xl,xh
003858 93af                      	push	xl
003859 93bf                      	push	xh
00385a 9508                      	ret
                                 
                                 ;   ?branch	( f -- )
                                 ;	Branch if flag is zero.
                                 
                                 ;	CODE	COMPO+7,"?branch"
                                 QBRAN:
00385b 91ff                      	pop		zh
00385c 91ef                      	pop		zl
00385d 2b89                      	or		tosl, tosh
00385e 9189
00385f 9199                      	loadtos
003860 f031                      	breq	BRAN1
003861 9631                      	adiw	zl,1
003862 93ef                      	push	zl
003863 93ff                      	push	zh
003864 9508                      	ret
                                 
                                 ;   branch	( -- )
                                 ;	Branch to an inline address.
                                 
                                 ;	CODE	COMPO+6,"branch"
                                 BRAN:	
003865 91ff                      	pop		zh
003866 91ef                      	pop		zl
                                 BRAN1:	
003867 0fee
003868 1fff
003869 91a5
00386a 91b5                      	readflashcell xl,xh
00386b 93af                      	push	xl
00386c 93bf                      	push	xh
00386d 9508                      	ret
                                 
                                 ;   EXECUTE	( b -- )
                                 ;	Execute the word at ca=b/2.
                                 
00386e 7044
00386f 4507
003870 4558
003871 5543
003872 4554                      	CODE	7,"EXECUTE"
                                 EXECU:
003873 9595                      	asr		tosh	;b/2
003874 9587                      	ror		tosl
003875 938f                      	push	tosl
003876 939f                      	push	tosh
003877 9189
003878 9199                      	loadtos
003879 9508                      	ret
                                 
                                 ;   EXIT	( -- )
                                 ;	Terminate current colon word.
                                 
00387a 70de
00387b 4504
00387c 4958
c:\users\rgeorge\Documents\Atmel Studio\7.0\328eForth_ASM\328eForth_ASM\main.asm(139): warning: .cseg .db misalignment - padding zero byte
c:\users\rgeorge\Documents\Atmel Studio\7.0\328eForth_ASM\328eForth_ASM\main.asm(382): macro 'CODE' called here
00387d 0054                      	CODE	4,"EXIT"
                                 EXIT:
00387e 91bf                      	pop		xh
00387f 91af                      	pop		xl
003880 9508                      	ret
                                 
                                 ;   !	( w a -- )
                                 ;	Pop the data stack to memory.
                                 
003881 70f6
003882 2101                      	CODE	1,"!"
                                 STORE:
003883 01fc                      	movw 	zl, tosl
003884 9189
003885 9199                      	loadtos
003886 8391                      	std 	Z+1, tosh
003887 8380                      	std 	Z+0, tosl
003888 9189
003889 9199                      	loadtos
00388a 9508                      	RET
                                 
                                 ;   @	( a -- w )
                                 ;	Push memory location to the data stack.
                                 
00388b 7104
00388c 4001                      	CODE	1,"@"
                                 AT:
00388d 01fc                      	movw 	zl, tosl
00388e 9181                      	ld 		tosl, z+
00388f 9191                      	ld 		tosh, z+
003890 9508                      	RET
                                 
                                 ;   I@	( a -- w )
                                 ;	Push flash memory cell to the data stack.
                                 
003891 7118
003892 4902
c:\users\rgeorge\Documents\Atmel Studio\7.0\328eForth_ASM\328eForth_ASM\main.asm(139): warning: .cseg .db misalignment - padding zero byte
c:\users\rgeorge\Documents\Atmel Studio\7.0\328eForth_ASM\328eForth_ASM\main.asm(413): macro 'CODE' called here
003893 0040                      	CODE	2,"I@"
                                 IAT:
003894 dfa6                      	RCALL	DOLIT
003895 011c                      	.DW		NEWER
003896 d035                      	RCALL	BUFQ	;n a new?
003897 dfc3                      	RCALL	QBRAN	;if a=new, fetch n in new_buf
003898 38a2                      	.DW		IAT1	;else, a=old?
003899 dfa1                      	RCALL	DOLIT	;n a a old
00389a 011e                      	.DW		OLDER
00389b d030                      	RCALL	BUFQ	;n a old?
00389c dfbe                      	RCALL	QBRAN	;if a=old, fetch n in old_buf
00389d 38a5                      	.DW		IAT2	
00389e 01fc                      	movw 	zl, tosl	;else, fetch from flash
00389f 9185                      	lpm		tosl, z+
0038a0 9195                      	lpm		tosh, z+
0038a1 9508                      	RET
                                 IAT1:
0038a2 df98                      	RCALL	DOLIT
0038a3 011c                      	.DW		NEWER
0038a4 c002                      	RJMP	IAT3
                                 IAT2:
0038a5 df95                      	RCALL	DOLIT
0038a6 011e                      	.DW		OLDER
                                 IAT3:
0038a7 d02b                      	RCALL	BUFAT
0038a8 cfe4                      	RJMP	AT
                                 
                                 ;   IC@	( a -- w )
                                 ;	Push flash memory byte to the data stack.
                                 
0038a9 7124
0038aa 4903
0038ab 4043                      	CODE	3,"IC@"
                                 ICAT:
0038ac df8e                      	RCALL	DOLIT
0038ad 011c                      	.DW		NEWER
0038ae d01d                      	RCALL	BUFQ	;n a new?
0038af dfab                      	RCALL	QBRAN	;if a=new, fetch n in new_buf
0038b0 38ba                      	.DW		ICAT1	;else, a=old?
0038b1 df89                      	RCALL	DOLIT	;n a a old
0038b2 011e                      	.DW		OLDER
0038b3 d018                      	RCALL	BUFQ	;n a old?
0038b4 dfa6                      	RCALL	QBRAN	;if a=old, fetch n in old_buf
0038b5 38bd                      	.DW		ICAT2	
0038b6 01fc                      	movw 	zl, tosl	;else, fetch from flash
0038b7 2799                      	clr 	tosh
0038b8 9184                      	lpm 	tosl, Z
0038b9 9508                      	RET
                                 ICAT1:
0038ba df80                      	RCALL	DOLIT
0038bb 011c                      	.DW		NEWER
0038bc c002                      	RJMP	ICAT3
                                 ICAT2:
0038bd df7d                      	RCALL	DOLIT
0038be 011e                      	.DW		OLDER
                                 ICAT3:
0038bf d013                      	RCALL	BUFAT
0038c0 c09d                      	RJMP	CAT
                                 
                                 ;	CODE	6,"BUFFER"	; ptr -- buf
                                 BUFFER:
0038c1 df79                      	RCALL	DOLIT
0038c2 0001                      	.DW		$1
0038c3 d0f7                      	RCALL	ANDD
0038c4 df96                      	RCALL	QBRAN
0038c5 38c9                      	.DW		BUF_1
0038c6 df74                      	RCALL	DOLIT
0038c7 0880                      	.DW		BUF1
0038c8 9508                      	RET	
                                 BUF_1:
0038c9 df71                      	RCALL	DOLIT
0038ca 0800                      	.DW		BUF0
0038cb 9508                      	RET
                                 
                                 ;	CODE	6,"BUF?"	; a new/old -- f
                                 BUFQ:
0038cc dfc0                      	RCALL	AT
0038cd d0dd                      	RCALL	OVER
0038ce d0fc                      	RCALL	XORR
0038cf df6b                      	RCALL	DOLIT
0038d0 7f80                      	.DW		$7F80
0038d1 d0e9                      	RCALL	ANDD
0038d2 9508                      	RET
                                 
                                 ;	CODE	6,"BUF@"	; a new/old -- buuf_addr
                                 BUFAT:
0038d3 dfb9                      	RCALL	AT
0038d4 dfec                      	RCALL	BUFFER
0038d5 d0cb                      	RCALL	SWAPP
0038d6 df64                      	RCALL	DOLIT
0038d7 007f                      	.DW		$7F
0038d8 d0e2                      	RCALL	ANDD
0038d9 c0f1                      	RJMP	XORR
                                 
                                 ;   I!	( w a -- )
                                 ;	Store w to flash memory byte location.
                                 
0038da 7154
0038db 4902
c:\users\rgeorge\Documents\Atmel Studio\7.0\328eForth_ASM\328eForth_ASM\main.asm(139): warning: .cseg .db misalignment - padding zero byte
c:\users\rgeorge\Documents\Atmel Studio\7.0\328eForth_ASM\328eForth_ASM\main.asm(508): macro 'CODE' called here
0038dc 0021                      	CODE	2,"I!"
                                 ISTOR:				;a=new?
0038dd df5d                      	RCALL	DOLIT
0038de 011c                      	.DW		NEWER
0038df dfec                      	RCALL	BUFQ	;n a a new_ptr
0038e0 df7a                      	RCALL	QBRAN	;if a=new, store n in new_buf
0038e1 38f3                      	.DW		ISTOR5	;else, a=old?
                                 ;
0038e2 df58                      	RCALL	DOLIT	;n a a old
0038e3 011e                      	.DW		OLDER
0038e4 dfe7                      	RCALL	BUFQ	;n a a old_ptr
0038e5 df75                      	RCALL	QBRAN	;if a=old, switch ptrs, store n in new_buf
0038e6 38f2                      	.DW		ISTOR4	;else, flush old_buf
                                 
0038e7 df53                      	RCALL	DOLIT	;n a old
0038e8 011e                      	.DW		OLDER
0038e9 dfa3                      	RCALL	AT	;n a old_ptr 
0038ea df50                      	RCALL	DOLIT	;n a dirty?
0038eb 8000                      	.DW		$8000
0038ec d0ce                      	RCALL	ANDD
0038ed df6d                      	RCALL	QBRAN	;if not dirty, go read flash data into old_buf
0038ee 38f0                      	.DW		ISTOR2	;else, flush old_buf to flash
                                 
0038ef d004                      ISTOR1:	RCALL	FLUSH_OLD
0038f0 d010                      ISTOR2:	RCALL	READ_FLASH
0038f1 d019                      ISTOR3:	RCALL	UPDATE_OLD
0038f2 d027                      ISTOR4:	RCALL	SWITCH
0038f3 c032                      ISTOR5:	RJMP 	UPDATE_NEW
                                 
                                 ;	CODE	5,"FLUSH"	; --
                                 FLUSH_OLD:
0038f4 df46                      	RCALL	DOLIT	;old
0038f5 011e                      	.DW		OLDER
0038f6 df96                      	RCALL	AT	;old_ptr
0038f7 d0a2                      	RCALL	DUPP	;old_ptr old_ptr
0038f8 df42                      	RCALL	DOLIT
0038f9 7f80                      	.DW		$7F80
0038fa d0c0                      	RCALL	ANDD	;old_ptr flash_addr 
0038fb d09e                      	RCALL	DUPP	;old_ptr flash_addr flash_addr
0038fc d691                      	RCALL	ERASE	;old_ptr flash_addr
                                 ;
0038fd d0a3                      	RCALL	SWAPP	;flash_addr old_ptr 
0038fe dfc2                      	RCALL	BUFFER	;flash_addr buf
0038ff d0a1                      	RCALL	SWAPP	;buf flash_addr
003900 c698                      	RJMP	WRITE	
                                 
                                 ;	CODE	4,"@OLD"	;a -- a
                                 READ_FLASH:	;read new flash data into old_buf
003901 df39                      	RCALL	DOLIT	;a old
003902 011e                      	.DW		OLDER
003903 df89                      	RCALL	AT		;a old_ptr
003904 dfbc                      	RCALL	BUFFER	;a buf
003905 d0a5                      	RCALL	OVER	;a buf a
003906 df34                      	RCALL	DOLIT
003907 7f80                      	.DW		$7F80
003908 d0b2                      	RCALL	ANDD	;a buf flash_addr
003909 d097                      	RCALL	SWAPP	;a flash_addr buf
00390a c6a6                      	RJMP	READ	;a
                                 
                                 ;	CODE	4,"!OLD"	;a --
                                 UPDATE_OLD:			;preserve buf? bit
00390b d08e                      	RCALL	DUPP	;a a
00390c df2e                      	RCALL	DOLIT	;
00390d 7f80                      	.DW		$7F80
00390e d0ac                      	RCALL	ANDD	;a page_addr
00390f df2b                      	RCALL	DOLIT
003910 011e                      	.DW		OLDER	;a page_addr old
003911 d08f                      	RCALL	SWAPP	;a old page_addr
003912 d098                      	RCALL	OVER	;a old page_addr old
003913 df79                      	RCALL	AT	;a old page_addr old_ptr
003914 df26                      	RCALL	DOLIT
003915 0001                      	.DW		$1
003916 d0a4                      	RCALL	ANDD	;a old page_addr buf?
003917 d0ab                      	RCALL	ORR	;a old updates_old_ptr
003918 d088                      	RCALL	SWAPP	;a old_ptr old
003919 cf69                      	RJMP	STORE	;a
                                 
                                 ;	CODE	6,"SWITCH"	; --
                                 SWITCH:	
00391a df20                      	RCALL	DOLIT	;old
00391b 011e                      	.DW		OLDER
00391c df70                      	RCALL	AT		;old_ptr
00391d df1d                      	RCALL	DOLIT	;old_ptr new
00391e 011c                      	.DW		NEWER
00391f df6d                      	RCALL	AT		;old_ptr new_ptr
003920 df1a                      	RCALL	DOLIT	;old_ptr new_ptr old
003921 011e                      	.DW		OLDER
003922 df60                      	RCALL	STORE	;old_ptr
003923 df17                      	RCALL	DOLIT	;old_ptr new
003924 011c                      	.DW		NEWER
003925 cf5d                      	RJMP	STORE	; 
                                 	
                                 ;	CODE	4,"!NEW"	;n a --
                                 UPDATE_NEW:			;write data to new buufer, set dirty bit
003926 df14                      	RCALL	DOLIT	;n a 7e
003927 007e                      	.DW		$7E
003928 d092                      	RCALL	ANDD	;n disp
003929 df11                      	RCALL	DOLIT	;n disp new
00392a 011c                      	.DW		NEWER
00392b df61                      	RCALL	AT		;n disp new_ptr
00392c df94                      	RCALL	BUFFER	;n disp buf
                                 UPDAT1:
00392d d095                      	RCALL	ORR		;n buff_addr
00392e df54                      	RCALL	STORE	;update word in new_buf
                                 
00392f df0b                      	RCALL	DOLIT	;set dirty bit in newer
003930 011c                      	.DW		NEWER
003931 d068                      	RCALL	DUPP	;newer newer
003932 df5a                      	RCALL	AT		;newer new_ptr
003933 df07                      	RCALL	DOLIT
003934 8000                      	.DW		$8000
003935 d08d                      	RCALL	ORR		;newer new_ptr_dirty
003936 d06a                      	RCALL	SWAPP
003937 cf4b                      	RJMP	STORE	;new buf is dirty now
                                 
                                 ;	EMPTY-BUFFERS ( -- )
003938 71b6
003939 4605
00393a 554c
00393b 4853                      	CODE	5,"FLUSH"
                                 
                                 EMPTY_BUF:
00393c d003                      	RCALL	EMPTY_OLD
00393d dfdc                      	RCALL	SWITCH
00393e d001                      	RCALL	EMPTY_OLD
00393f cfda                      	RJMP	SWITCH
                                 
                                 ;	EMPTY_OLD	;flush old buffer if it is dirty
                                 
                                 EMPTY_OLD:
003940 defa                      	RCALL	DOLIT	;old
003941 011e                      	.DW		OLDER
003942 df4a                      	RCALL	AT		;old_ptr 
003943 d056                      	RCALL	DUPP	;old_ptr old_ptr
003944 def6                      	RCALL	DOLIT	;
003945 8000                      	.DW		$8000
003946 d074                      	RCALL	ANDD	;old_ptr dirty?
003947 df13                      	RCALL	QBRAN	;if not dirty, exit
003948 3950                      	.DW		EMPTY_1	;else, flush old_buf
                                 ;
003949 def1                      	RCALL	DOLIT	;old_ptr
00394a 7fff                      	.DW		$7FFF
00394b d06f                      	RCALL	ANDD	;old_ptr, dirty bit cleared
00394c deee                      	RCALL	DOLIT
00394d 011e                      	.DW		OLDER
00394e df34                      	RCALL	STORE	;old_ptr flash_addr
00394f cfa4                      	RJMP	FLUSH_OLD
                                 EMPTY_1:
003950 c043                      	RJMP	DROP
                                 
                                 ;   C!	( c b -- )
                                 ;	Pop the data stack to byte memory.
                                 
003951 7272
003952 4302
c:\users\rgeorge\Documents\Atmel Studio\7.0\328eForth_ASM\328eForth_ASM\main.asm(139): warning: .cseg .db misalignment - padding zero byte
c:\users\rgeorge\Documents\Atmel Studio\7.0\328eForth_ASM\328eForth_ASM\main.asm(658): macro 'CODE' called here
003953 0021                      	CODE	2,"C!"
                                 CSTOR:
003954 01fc                      	movw 	zl, tosl
003955 9189
003956 9199                      	loadtos
003957 8380                      	st 		Z, tosl
003958 9189
003959 9199                      	loadtos
00395a 9508                      	RET
                                 
                                 ;   C@	( b -- c )
                                 ;	Push byte memory location to the data stack.
                                 
00395b 72a4
00395c 4302
c:\users\rgeorge\Documents\Atmel Studio\7.0\328eForth_ASM\328eForth_ASM\main.asm(139): warning: .cseg .db misalignment - padding zero byte
c:\users\rgeorge\Documents\Atmel Studio\7.0\328eForth_ASM\328eForth_ASM\main.asm(669): macro 'CODE' called here
00395d 0040                      	CODE	2,"C@"
                                 CAT:
00395e 01fc                      	movw 	zl, tosl
00395f 2799                      	clr 	tosh
003960 8180                      	ld 		tosl, Z
003961 9508                      	RET
                                 
                                 ;   R>	( -- w )
                                 ;	Pop the return stack to the data stack.
                                 
003962 72b8
003963 5242
c:\users\rgeorge\Documents\Atmel Studio\7.0\328eForth_ASM\328eForth_ASM\main.asm(139): warning: .cseg .db misalignment - padding zero byte
c:\users\rgeorge\Documents\Atmel Studio\7.0\328eForth_ASM\328eForth_ASM\main.asm(679): macro 'CODE' called here
003964 003e                      	CODE	COMPO+2,"R>"
                                 RFROM:
003965 939a
003966 938a                      	savetos
003967 91bf                      	pop		xh
003968 91af                      	pop		xl
003969 919f                      	pop 	tosh
00396a 918f                      	pop 	tosl
00396b 93af                      	push 	xl
00396c 93bf                      	push 	xh
00396d 9508                      	RET
                                 
                                 ;   R@	( -- w )
                                 ;	Copy top of return stack to the data stack.
                                 
00396e 72c6
00396f 5202
c:\users\rgeorge\Documents\Atmel Studio\7.0\328eForth_ASM\328eForth_ASM\main.asm(139): warning: .cseg .db misalignment - padding zero byte
c:\users\rgeorge\Documents\Atmel Studio\7.0\328eForth_ASM\328eForth_ASM\main.asm(693): macro 'CODE' called here
003970 0040                      	CODE	2,"R@"
                                 RAT:
003971 939a
003972 938a                      	savetos
003973 91bf                      	pop		xh
003974 91af                      	pop		xl
003975 919f                      	pop 	tosh
003976 918f                      	pop 	tosl
003977 938f                      	push 	tosl
003978 939f                      	push 	tosh
003979 93af                      	push 	xl
00397a 93bf                      	push 	xh
00397b 9508                      	RET
                                 
                                 ;   >R	( w -- )
                                 ;	Push the data stack to the return stack.
                                 
00397c 72de
00397d 3e42
c:\users\rgeorge\Documents\Atmel Studio\7.0\328eForth_ASM\328eForth_ASM\main.asm(139): warning: .cseg .db misalignment - padding zero byte
c:\users\rgeorge\Documents\Atmel Studio\7.0\328eForth_ASM\328eForth_ASM\main.asm(709): macro 'CODE' called here
00397e 0052                      	CODE	COMPO+2,">R"
                                 TOR:
00397f 91bf                      	pop		xh
003980 91af                      	pop		xl
003981 938f                      	push 	tosl
003982 939f                      	push 	tosh
003983 93af                      	push 	xl
003984 93bf                      	push 	xh
003985 9189
003986 9199                      	loadtos
003987 9508                      	RET
                                 
                                 ;   SP@	( -- a )
                                 ;	Push the current data stack pointer.
                                 
                                 ;	CODE	3,"SP@"
                                 SPAT:
003988 939a
003989 938a                      	savetos
00398a 01ce                      	movw	tosl, yl
00398b 9508                      	RET
                                 
                                 ;   SP!	( a -- )
                                 ;	Set the data stack pointer.
                                 
                                 ;	CODE	3,"SP!"
                                 SPSTO:
00398c 01ec                      	movw 	yl, tosl
00398d 9189
00398e 9199                      	loadtos
00398f 9508                      	RET
                                 
                                 ;   DROP	( w -- )
                                 ;	Discard top stack item.
                                 
003990 72fa
003991 4404
003992 4f52
c:\users\rgeorge\Documents\Atmel Studio\7.0\328eForth_ASM\328eForth_ASM\main.asm(139): warning: .cseg .db misalignment - padding zero byte
c:\users\rgeorge\Documents\Atmel Studio\7.0\328eForth_ASM\328eForth_ASM\main.asm(741): macro 'CODE' called here
003993 0050                      	CODE	4,"DROP"
                                 DROP:
003994 9189
003995 9199                      	loadtos
003996 9508                      	RET
                                 
                                 ;   DUP	( w -- w w )
                                 ;	Duplicate the top stack item.
                                 
003997 7322
003998 4403
003999 5055                      	CODE	3,"DUP"
                                 DUPP:
00399a 939a
00399b 938a                      	savetos
00399c 9508                      	RET
                                 
                                 ;   SWAP	( w1 w2 -- w2 w1 )
                                 ;	Exchange top two stack items.
                                 
00399d 7330
00399e 5304
00399f 4157
c:\users\rgeorge\Documents\Atmel Studio\7.0\328eForth_ASM\328eForth_ASM\main.asm(139): warning: .cseg .db misalignment - padding zero byte
c:\users\rgeorge\Documents\Atmel Studio\7.0\328eForth_ASM\328eForth_ASM\main.asm(757): macro 'CODE' called here
0039a0 0050                      	CODE	4,"SWAP"
                                 SWAPP:
0039a1 01dc                      	movw 	xl, tosl
0039a2 9189                      	ld		tosl,Y+
0039a3 9199                      	ld		tosh,Y+
0039a4 93ba                      	st 		-Y, xh
0039a5 93aa                      	st 		-Y, xl
0039a6 9508                      	RET
                                 
                                 ;   OVER	( w1 w2 -- w1 w2 w1 )
                                 ;	Copy second stack item to top.
                                 
0039a7 733c
0039a8 4f04
0039a9 4556
c:\users\rgeorge\Documents\Atmel Studio\7.0\328eForth_ASM\328eForth_ASM\main.asm(139): warning: .cseg .db misalignment - padding zero byte
c:\users\rgeorge\Documents\Atmel Studio\7.0\328eForth_ASM\328eForth_ASM\main.asm(769): macro 'CODE' called here
0039aa 0052                      	CODE	4,"OVER"
                                 OVER:
0039ab 939a
0039ac 938a                      	savetos
0039ad 818a                      	ldd 	tosl, Y+2
0039ae 819b                      	ldd 	tosh, Y+3
0039af 9508                      	RET
                                 
                                 ;   0<	( n -- t )
                                 ;	Return true if n is negative.
                                 
0039b0 7350
0039b1 3002
c:\users\rgeorge\Documents\Atmel Studio\7.0\328eForth_ASM\328eForth_ASM\main.asm(139): warning: .cseg .db misalignment - padding zero byte
c:\users\rgeorge\Documents\Atmel Studio\7.0\328eForth_ASM\328eForth_ASM\main.asm(779): macro 'CODE' called here
0039b2 003c                      	CODE	2,"0<"
                                 ZLESS:
0039b3 2399                      	tst 	tosh
0039b4 01c1                      	movw 	tosl, zerol
0039b5 f40c                      	brge 	ZLESS1
0039b6 9701                      	sbiw 	tosl,1
                                 ZLESS1:
0039b7 9508                      	RET
                                 
                                 ;   AND	( w w -- w )
                                 ;	Bitwise AND.
                                 
0039b8 7362
0039b9 4103
0039ba 444e                      	CODE	3,"AND"
                                 ANDD:
0039bb 91a9                      	ld 		xl, Y+
0039bc 91b9                      	ld 		xh, Y+
0039bd 238a                      	and 	tosl, xl
0039be 239b                      	and 	tosh, xh
0039bf 9508                      	RET
                                 
                                 ;   OR	( w w -- w )
                                 ;	Bitwise inclusive OR.
                                 
0039c0 7372
0039c1 4f02
c:\users\rgeorge\Documents\Atmel Studio\7.0\328eForth_ASM\328eForth_ASM\main.asm(139): warning: .cseg .db misalignment - padding zero byte
c:\users\rgeorge\Documents\Atmel Studio\7.0\328eForth_ASM\328eForth_ASM\main.asm(802): macro 'CODE' called here
0039c2 0052                      	CODE	2,"OR"
                                 ORR:
0039c3 91a9                      	ld 		xl, Y+
0039c4 91b9                      	ld 		xh, Y+
0039c5 2b8a                      	or 		tosl, xl
0039c6 2b9b                      	or 		tosh, xh
0039c7 9508                      	RET
                                 
                                 ;   XOR	( w w -- w )
                                 ;	Bitwise exclusive OR.
                                 
0039c8 7382
0039c9 5803
0039ca 524f                      	CODE	3,"XOR"
                                 XORR:
0039cb 91a9                      	ld 		xl, Y+
0039cc 91b9                      	ld 		xh, Y+
0039cd 278a                         	eor 	tosl, xl
0039ce 279b                      	eor 	tosh, xh
0039cf 9508                      	RET
                                 
                                 ;   UM+	( u u -- udsum )
                                 ;	Add two unsigned single numbers and return a double sum.
                                 
0039d0 7392
0039d1 5503
0039d2 2b4d                      	CODE	3,"UM+"
                                 UPLUS:
0039d3 91a9                      	ld 		xl, Y+
0039d4 91b9                      	ld 		xh, Y+
0039d5 0f8a                      	add 	tosl, xl
0039d6 1f9b                      	adc 	tosh, xh
0039d7 939a
0039d8 938a                      	savetos
0039d9 2799                      	clr		tosh
0039da 2788                      	clr		tosl
0039db 1f88                      	rol		tosl
0039dc 9508                      	RET
                                 
                                 ;; System and user variables
                                 
                                 ;   doVAR	( -- a )
                                 ;	Run time routine for VARIABLE and CREATE.
                                 
                                 ;	CODE	COMPO+5,"doVAR"
                                 DOVAR:
0039dd 939a
0039de 938a                      	savetos
0039df 91ff                      	pop 	zh
0039e0 91ef                      	pop 	zl
0039e1 0fee
0039e2 1fff
0039e3 9185
0039e4 9195                      	readflashcell tosl,tosh
0039e5 9508                      	RET
                                 
                                 ;   'BOOT	( -- a )
                                 ;	Storage of application address.
                                 
0039e6 73a2
0039e7 2705
0039e8 4f42
0039e9 544f                      	COLON	5,"'BOOT"
                                 TBOOT:
0039ea dff2                      	RCALL	DOVAR
0039eb 0100                      	.DW		UPP
                                 
                                 ;   BASE	( -- a )
                                 ;	Storage of the radix base for numeric I/O.
                                 
0039ec 73ce
0039ed 4204
0039ee 5341
c:\users\rgeorge\Documents\Atmel Studio\7.0\328eForth_ASM\328eForth_ASM\main.asm(147): warning: .cseg .db misalignment - padding zero byte
c:\users\rgeorge\Documents\Atmel Studio\7.0\328eForth_ASM\328eForth_ASM\main.asm(860): macro 'COLON' called here
0039ef 0045                      	COLON	4,"BASE"
                                 BASE:
0039f0 dfec                      	RCALL	DOVAR
0039f1 0104                      	.DW		UPP+4
                                 
                                 ;   tmp	( -- a )
                                 ;	A temporary storage location used in parse and find.
                                 
0039f2 73da
0039f3 5403
0039f4 504d                      	COLON	3,"TMP"
                                 TEMP:
0039f5 dfe7                      	RCALL	DOVAR
0039f6 0106                      	.DW		UPP+6
                                 
                                 ;   SPAN	( -- a )
                                 ;	Hold character count received by EXPECT.
                                 
0039f7 73e6
0039f8 5304
0039f9 4150
c:\users\rgeorge\Documents\Atmel Studio\7.0\328eForth_ASM\328eForth_ASM\main.asm(147): warning: .cseg .db misalignment - padding zero byte
c:\users\rgeorge\Documents\Atmel Studio\7.0\328eForth_ASM\328eForth_ASM\main.asm(876): macro 'COLON' called here
0039fa 004e                      	COLON	4,"SPAN"
                                 SPAN:
0039fb dfe1                      	RCALL	DOVAR
0039fc 0108                      	.DW		UPP+8
                                 
                                 ;   >IN	( -- a )
                                 ;	Hold the character pointer while parsing input stream.
                                 
0039fd 73f0
0039fe 3e03
0039ff 4e49                      	COLON	3,">IN"
                                 INN:
003a00 dfdc                      	RCALL	DOVAR
003a01 010a                      	.DW		UPP+10
                                 
                                 ;   #TIB	( -- a )
                                 ;	Hold the current count in and address of the terminal input buffer.
                                 
003a02 73fc
003a03 2304
003a04 4954
c:\users\rgeorge\Documents\Atmel Studio\7.0\328eForth_ASM\328eForth_ASM\main.asm(147): warning: .cseg .db misalignment - padding zero byte
c:\users\rgeorge\Documents\Atmel Studio\7.0\328eForth_ASM\328eForth_ASM\main.asm(892): macro 'COLON' called here
003a05 0042                      	COLON	4,"#TIB"
                                 NTIB:
003a06 dfd6                      	RCALL	DOVAR
003a07 010c                      	.DW		UPP+12
                                 
                                 ;   'TIB	( -- a )
                                 ;	Hold the current count in and address of the terminal input buffer.
                                 
003a08 7406
003a09 2704
003a0a 4954
c:\users\rgeorge\Documents\Atmel Studio\7.0\328eForth_ASM\328eForth_ASM\main.asm(147): warning: .cseg .db misalignment - padding zero byte
c:\users\rgeorge\Documents\Atmel Studio\7.0\328eForth_ASM\328eForth_ASM\main.asm(900): macro 'COLON' called here
003a0b 0042                      	COLON	4,"'TIB"
                                 TTIB:
003a0c dfd0                      	RCALL	DOVAR
003a0d 010e                      	.DW		UPP+14
                                 
                                 ;   'EVAL	( -- a )
                                 ;	Execution vector of EVAL.
                                 
003a0e 7412
003a0f 2705
003a10 5645
003a11 4c41                      	COLON	5,"'EVAL"
                                 TEVAL:
003a12 dfca                      	RCALL	DOVAR
003a13 0110                      	.DW		UPP+16
                                 
                                 ;   HLD	( -- a )
                                 ;	Hold a pointer in building a numeric output string.
                                 
003a14 741e
003a15 4803
003a16 444c                      	COLON	3,"HLD"
                                 HLD:
003a17 dfc5                      	RCALL	DOVAR
003a18 0112                      	.DW		UPP+18
                                 
                                 ;   CONTEXT	( -- a )
                                 ;	A area to specify vocabulary search order.
                                 
003a19 742a
003a1a 4307
003a1b 4e4f
003a1c 4554
003a1d 5458                      	COLON	7,"CONTEXT"
                                 CNTXT:
003a1e dfbe                      	RCALL	DOVAR
003a1f 0114                      	.DW		UPP+20
                                 
                                 ;   CP	( -- a )
                                 ;	Point to the top of the code dictionary.
                                 
003a20 7434
003a21 4302
c:\users\rgeorge\Documents\Atmel Studio\7.0\328eForth_ASM\328eForth_ASM\main.asm(147): warning: .cseg .db misalignment - padding zero byte
c:\users\rgeorge\Documents\Atmel Studio\7.0\328eForth_ASM\328eForth_ASM\main.asm(932): macro 'COLON' called here
003a22 0050                      	COLON	2,"CP"
                                 CPP:
003a23 dfb9                      	RCALL	DOVAR
003a24 0116                      	.DW		UPP+22
                                 
                                 ;   DP	( -- a )
                                 ;	Point to the free RAM space.
                                 
003a25 7442
003a26 4402
c:\users\rgeorge\Documents\Atmel Studio\7.0\328eForth_ASM\328eForth_ASM\main.asm(147): warning: .cseg .db misalignment - padding zero byte
c:\users\rgeorge\Documents\Atmel Studio\7.0\328eForth_ASM\328eForth_ASM\main.asm(940): macro 'COLON' called here
003a27 0050                      	COLON	2,"DP"
                                 DPP:
003a28 dfb4                      	RCALL	DOVAR
003a29 0118                      	.DW		UPP+24
                                 
                                 ;   LAST	( -- a )
                                 ;	Point to the last name in the name dictionary.
                                 
003a2a 744c
003a2b 4c04
003a2c 5341
c:\users\rgeorge\Documents\Atmel Studio\7.0\328eForth_ASM\328eForth_ASM\main.asm(147): warning: .cseg .db misalignment - padding zero byte
c:\users\rgeorge\Documents\Atmel Studio\7.0\328eForth_ASM\328eForth_ASM\main.asm(948): macro 'COLON' called here
003a2d 0054                      	COLON	4,"LAST"
                                 LAST:
003a2e dfae                      	RCALL	DOVAR
003a2f 011a                      	.DW		UPP+26
                                 
                                 ;; Common functions
                                 
                                 ;   2*	( n -- n )
                                 ;	Multiply tos by cell size in bytes.
                                 
003a30 7456
003a31 3202
c:\users\rgeorge\Documents\Atmel Studio\7.0\328eForth_ASM\328eForth_ASM\main.asm(147): warning: .cseg .db misalignment - padding zero byte
c:\users\rgeorge\Documents\Atmel Studio\7.0\328eForth_ASM\328eForth_ASM\main.asm(958): macro 'COLON' called here
003a32 002a                      	COLON	2,"2*"
                                 CELLS:
003a33 0f88                      	lsl		tosl
003a34 1f99                      	rol		tosh
003a35 9508                      	ret
                                 
                                 ;   2/	( n -- n )
                                 ;	Divide tos by cell size in bytes.
                                 
003a36 7462
003a37 3202
c:\users\rgeorge\Documents\Atmel Studio\7.0\328eForth_ASM\328eForth_ASM\main.asm(147): warning: .cseg .db misalignment - padding zero byte
c:\users\rgeorge\Documents\Atmel Studio\7.0\328eForth_ASM\328eForth_ASM\main.asm(967): macro 'COLON' called here
003a38 002f                      	COLON	2,"2/"
                                 TWOSL:
003a39 9595                      	asr		tosh
003a3a 9587                      	ror		tosl
003a3b 9508                      	ret
                                 
                                 ;   ALIGNED	( b -- a )
                                 ;	Align address to the cell boundary.
                                 
                                 ;	COLON	7,"ALIGNED"
                                 ALGND:
003a3c 9601                      	adiw	tosl,1
003a3d 7f8e                      	andi	tosl,254
003a3e 9508                      	ret
                                 
                                 ;   BL	( -- 32 )
                                 ;	Return 32, the blank character.
                                 
003a3f 746e
003a40 4202
c:\users\rgeorge\Documents\Atmel Studio\7.0\328eForth_ASM\328eForth_ASM\main.asm(147): warning: .cseg .db misalignment - padding zero byte
c:\users\rgeorge\Documents\Atmel Studio\7.0\328eForth_ASM\328eForth_ASM\main.asm(985): macro 'COLON' called here
003a41 004c                      	COLON	2,"BL"
                                 BLANK:
003a42 939a
003a43 938a                      	savetos
003a44 e280                      	ldi		tosl,32
003a45 2799                      	clr		tosh
003a46 9508                      	ret
                                 
                                 ;   ?DUP	( w -- w w | 0 )
                                 ;	Dup tos if its is not zero.
                                 
003a47 7480
003a48 3f04
003a49 5544
c:\users\rgeorge\Documents\Atmel Studio\7.0\328eForth_ASM\328eForth_ASM\main.asm(147): warning: .cseg .db misalignment - padding zero byte
c:\users\rgeorge\Documents\Atmel Studio\7.0\328eForth_ASM\328eForth_ASM\main.asm(995): macro 'COLON' called here
003a4a 0050                      	COLON	4,"?DUP"
                                 QDUP:
003a4b 2f08                          mov 	temp0, tosl
003a4c 2b09                          or 		temp0, tosh
003a4d f011                          breq 	QDUP1
003a4e 939a
003a4f 938a                          savetos
                                 QDUP1:
003a50 9508                      	RET
                                 
                                 ;   ROT	( w1 w2 w3 -- w2 w3 w1 )
                                 ;	Rot 3rd item to top.
                                 
003a51 7490
003a52 5203
003a53 544f                      	COLON	3,"ROT"
                                 ROT:
003a54 018c                          movw 	temp0, tosl
003a55 9129                          ld 		temp2, Y+
003a56 9139                          ld 		temp3, Y+ 
003a57 9189
003a58 9199                          loadtos
003a59 933a                          st 		-Y, temp3
003a5a 932a                          st 		-Y, temp2
003a5b 931a                          st 		-Y, temp1
003a5c 930a                          st 		-Y, temp0
003a5d 9508                      	RET
                                 
                                 ;   2DROP	( w w -- )
                                 ;	Discard two items on stack.
                                 
003a5e 74a4
003a5f 3205
003a60 5244
003a61 504f                      	COLON	5,"2DROP"
                                 DDROP:
003a62 9189
003a63 9199                      	loadtos
003a64 9189
003a65 9199                      	loadtos
003a66 9508                      	ret
                                 
                                 ;   2DUP	( w1 w2 -- w1 w2 w1 w2 )
                                 ;	Duplicate top two items.
                                 
003a67 74be
003a68 3204
003a69 5544
c:\users\rgeorge\Documents\Atmel Studio\7.0\328eForth_ASM\328eForth_ASM\main.asm(147): warning: .cseg .db misalignment - padding zero byte
c:\users\rgeorge\Documents\Atmel Studio\7.0\328eForth_ASM\328eForth_ASM\main.asm(1031): macro 'COLON' called here
003a6a 0050                      	COLON	4,"2DUP"
                                 DDUP:
003a6b df3f                      	RCALL	OVER
003a6c cf3e                      	RJMP	OVER
                                 
                                 ;   +	( w w -- sum )
                                 ;	Add top two items.
                                 
003a6d 74d0
003a6e 2b01                      	COLON	1,"+"
                                 PLUS:
003a6f 9109                          ld 		temp0, Y+
003a70 9119                          ld 		temp1, Y+
003a71 0f80                          add 	tosl, temp0
003a72 1f91                          adc 	tosh, temp1
003a73 9508                      	RET
                                 
                                 ;   NOT	( w -- w )
                                 ;	One's complement of tos.
                                 
003a74 74dc
003a75 4906
003a76 564e
003a77 5245
c:\users\rgeorge\Documents\Atmel Studio\7.0\328eForth_ASM\328eForth_ASM\main.asm(147): warning: .cseg .db misalignment - padding zero byte
c:\users\rgeorge\Documents\Atmel Studio\7.0\328eForth_ASM\328eForth_ASM\main.asm(1050): macro 'COLON' called here
003a78 0054                      	COLON	6,"INVERT"
                                 INVER:
003a79 9580                          com 	tosl
003a7a 9590                          com 	tosh
003a7b 9508                      	ret
                                 
                                 ;   NEGATE	( n -- -n )
                                 ;	Two's complement of tos.
                                 
003a7c 74ea
003a7d 4e06
003a7e 4745
003a7f 5441
c:\users\rgeorge\Documents\Atmel Studio\7.0\328eForth_ASM\328eForth_ASM\main.asm(147): warning: .cseg .db misalignment - padding zero byte
c:\users\rgeorge\Documents\Atmel Studio\7.0\328eForth_ASM\328eForth_ASM\main.asm(1059): macro 'COLON' called here
003a80 0045                      	COLON	6,"NEGATE"
                                 NEGAT:
003a81 dff7                      	RCALL	INVER
003a82 9601                      	adiw	tosl,1
003a83 9508                      	ret
                                 
                                 ;   DNEGATE	( d -- -d )
                                 ;	Two's complement of top double.
                                 
003a84 74fa
003a85 4407
003a86 454e
003a87 4147
003a88 4554                      	COLON	7,"DNEGATE"
                                 DNEGA:
003a89 dfef                      	RCALL	INVER
003a8a def4                      	RCALL	TOR
003a8b dfed                      	RCALL	INVER
003a8c ddae                      	RCALL	DOLIT
003a8d 0001                      	.DW	1
003a8e df44                      	RCALL	UPLUS
003a8f ded5                      	RCALL	RFROM
003a90 cfde                      	RJMP	PLUS
                                 
                                 ;   -	( n1 n2 -- n1-n2 )
                                 ;	Subtraction.
                                 
003a91 750a
003a92 2d01                      	COLON	1,"-"
                                 SUBB:
003a93 9109                          ld 		temp0, Y+
003a94 9119                          ld 		temp1, Y+
003a95 1b08                          sub 	temp0, tosl
003a96 0b19                          sbc 	temp1, tosh
003a97 01c8                          movw 	tosl, temp0
003a98 9508                      	ret
                                 
                                 ;   ABS		( n -- n )
                                 ;	Return the absolute value of n.
                                 
003a99 7524
003a9a 4103
003a9b 5342                      	COLON	3,"ABS"
                                 ABSS:
003a9c defd                      	RCALL	DUPP
003a9d df15                      	RCALL	ZLESS
003a9e ddbc                      	RCALL	QBRAN
003a9f 3aa1                      	.DW	ABS1
003aa0 cfe0                      	RJMP	NEGAT
                                 ABS1:	
003aa1 9508                      	RET
                                 
                                 ;   =	( w w -- t )
                                 ;	Return true if top two are equal.
                                 
003aa2 7534
003aa3 3d01                      	COLON	1,"="
                                 EQUAL:
003aa4 df26                      	RCALL	XORR
003aa5 ddb5                      	RCALL	QBRAN
003aa6 3aaa                      	.DW		EQU1
003aa7 dd93                      	RCALL	DOLIT
003aa8 0000                      	.DW		0
003aa9 9508                      	RET
                                 EQU1:
003aaa dd90                      	RCALL	DOLIT
003aab ffff                      	.DW		-1
003aac 9508                      	RET
                                 
                                 ;   U<	( u u -- t )
                                 ;	Unsigned compare of top two items.
                                 
003aad 7546
003aae 5502
c:\users\rgeorge\Documents\Atmel Studio\7.0\328eForth_ASM\328eForth_ASM\main.asm(147): warning: .cseg .db misalignment - padding zero byte
c:\users\rgeorge\Documents\Atmel Studio\7.0\328eForth_ASM\328eForth_ASM\main.asm(1123): macro 'COLON' called here
003aaf 003c                      	COLON	2,"U<"
                                 ULESS:
003ab0 dfba                      	RCALL	DDUP
003ab1 df19                      	RCALL	XORR
003ab2 df00                      	RCALL	ZLESS
003ab3 dda7                      	RCALL	QBRAN
003ab4 3ab8                      	.DW		ULES1
003ab5 deeb                      	RCALL	SWAPP
003ab6 dedd                      	RCALL	DROP
003ab7 cefb                      	RJMP	ZLESS
                                 ULES1:
003ab8 dfda                      	RCALL	SUBB
003ab9 cef9                      	RJMP	ZLESS
                                 
                                 ;   <	( n1 n2 -- t )
                                 ;	Signed compare of top two items.
                                 
003aba 755c
003abb 3c01                      	COLON	1,"<"
                                 LESS:
003abc dfae                      	RCALL	DDUP
003abd df0d                      	RCALL	XORR
003abe def4                      	RCALL	ZLESS
003abf dd9b                      	RCALL	QBRAN
003ac0 3ac3                      	.DW		LESS1
003ac1 ded2                      	RCALL	DROP
003ac2 cef0                      	RJMP	ZLESS
                                 LESS1:
003ac3 dfcf                      	RCALL	SUBB
003ac4 ceee                      	RJMP	ZLESS
                                 
                                 ;   MAX	( n n -- n )
                                 ;	Return the greater of two top stack items.
                                 
003ac5 7576
003ac6 4d03
003ac7 5841                      	COLON	3,"MAX"
                                 MAX:
003ac8 dfa2                      	RCALL	DDUP
003ac9 dff2                      	RCALL	LESS
003aca dd90                      	RCALL	QBRAN
003acb 3acd                      	.DW		MAX1
003acc ded4                      	RCALL	SWAPP
                                 MAX1:
003acd cec6                      	RJMP	DROP
                                 
                                 ;   MIN	( n n -- n )
                                 ;	Return the smaller of top two stack items.
                                 
003ace 758c
003acf 4d03
003ad0 4e49                      	COLON	3,"MIN"
                                 MIN:
003ad1 df99                      	RCALL	DDUP
003ad2 dece                      	RCALL	SWAPP
003ad3 dfe8                      	RCALL	LESS
003ad4 dd86                      	RCALL	QBRAN
003ad5 3ad7                      	.DW		MIN1
003ad6 deca                      	RCALL	SWAPP
                                 MIN1:
003ad7 cebc                      	RJMP	DROP
                                 
                                 ;   WITHIN	( u ul uh -- t )
                                 ;	Return true if u is within the range of ul and uh. ( ul <= u < uh )
                                 
003ad8 759e
003ad9 5706
003ada 5449
003adb 4948
c:\users\rgeorge\Documents\Atmel Studio\7.0\328eForth_ASM\328eForth_ASM\main.asm(147): warning: .cseg .db misalignment - padding zero byte
c:\users\rgeorge\Documents\Atmel Studio\7.0\328eForth_ASM\328eForth_ASM\main.asm(1183): macro 'COLON' called here
003adc 004e                      	COLON	6,"WITHIN"
                                 WITHI:
003add decd                      	RCALL	OVER
003ade dfb4                      	RCALL	SUBB
003adf de9f                      	RCALL	TOR
003ae0 dfb2                      	RCALL	SUBB
003ae1 de83                      	RCALL	RFROM
003ae2 cfcd                      	RJMP	ULESS
                                 
                                 ;; Divide
                                 
                                 ;   UM/MOD	( udl udh un -- ur uq )
                                 ;	Unsigned divide of a double by a single. Return mod and quotient.
                                 
003ae3 75b2
003ae4 5506
003ae5 2f4d
003ae6 4f4d
c:\users\rgeorge\Documents\Atmel Studio\7.0\328eForth_ASM\328eForth_ASM\main.asm(147): warning: .cseg .db misalignment - padding zero byte
c:\users\rgeorge\Documents\Atmel Studio\7.0\328eForth_ASM\328eForth_ASM\main.asm(1197): macro 'COLON' called here
003ae7 0044                      	COLON	6,"UM/MOD"
                                 UMMOD:
003ae8 017c                          movw 	temp4, tosl
003ae9 9129                          ld 		temp2, Y+
003aea 9139                          ld 		temp3, Y+
003aeb 9109                          ld 		temp0, Y+
003aec 9119                          ld 		temp1, Y+
                                 ;; unsigned 32/16 -> 16r16 divide
                                   ; set 	loop counter
003aed e140                          ldi 	temp6,$10
                                 UMMOD1:
                                     ; shift left, saving high bit
003aee 2755                          clr 	temp7
003aef 0f00                          lsl 	temp0
003af0 1f11                          rol 	temp1
003af1 1f22                          rol 	temp2
003af2 1f33                          rol 	temp3
003af3 1f55                          rol 	temp7
                                   ; try subtracting divisor
003af4 152e                          cp 		temp2, temp4
003af5 053f                          cpc 	temp3, temp5
003af6 0552                          cpc 	temp7,zerol
003af7 f018                          brcs 	UMMOD3
                                 UMMOD2:
                                     ; dividend is large enough
                                     ; do the subtraction for real
                                     ; and set lowest bit
003af8 9503                          inc 	temp0
003af9 192e                          sub 	temp2, temp4
003afa 093f                          sbc 	temp3, temp5
                                 UMMOD3:
003afb 954a                          dec  	temp6
003afc f789                          brne 	UMMOD1
                                 UMMOD4:
                                     ; put remainder on stack
003afd 933a                          st 		-Y,temp3
003afe 932a                          st 		-Y,temp2
                                     ; put quotient on stack
003aff 01c8                          movw 	tosl, temp0
003b00 9508                      	ret
                                 
                                 ;   M/MOD	( d n -- r q )
                                 ;	Signed floored divide of double by single. Return mod and quotient.
                                 
003b01 75c8
003b02 4d05
003b03 4d2f
003b04 444f                      	COLON	5,"M/MOD"
                                 MSMOD:
003b05 de94                      	RCALL	DUPP
003b06 deac                      	RCALL	ZLESS
003b07 de92                      	RCALL	DUPP
003b08 de76                      	RCALL	TOR
003b09 dd51                      	RCALL	QBRAN
003b0a 3b0f                      	.DW	MMOD1
003b0b df75                      	RCALL	NEGAT
003b0c de72                      	RCALL	TOR
003b0d df7b                      	RCALL	DNEGA
003b0e de56                      	RCALL	RFROM
                                 MMOD1:	
003b0f de6f                      	RCALL	TOR
003b10 de89                      	RCALL	DUPP
003b11 dea1                      	RCALL	ZLESS
003b12 dd48                      	RCALL	QBRAN
003b13 3b16                      	.DW	MMOD2
003b14 de5c                      	RCALL	RAT
003b15 df59                      	RCALL	PLUS
                                 MMOD2:	
003b16 de4e                      	RCALL	RFROM
003b17 dfd0                      	RCALL	UMMOD
003b18 de4c                      	RCALL	RFROM
003b19 dd41                      	RCALL	QBRAN
003b1a 3b1e                      	.DW	MMOD3
003b1b de85                      	RCALL	SWAPP
003b1c df64                      	RCALL	NEGAT
003b1d de83                      	RCALL	SWAPP
                                 MMOD3:	
003b1e 9508                      	RET
                                 
                                 ;   /MOD	( n n -- r q )
                                 ;	Signed divide. Return mod and quotient.
                                 
003b1f 7604
003b20 2f04
003b21 4f4d
c:\users\rgeorge\Documents\Atmel Studio\7.0\328eForth_ASM\328eForth_ASM\main.asm(147): warning: .cseg .db misalignment - padding zero byte
c:\users\rgeorge\Documents\Atmel Studio\7.0\328eForth_ASM\328eForth_ASM\main.asm(1276): macro 'COLON' called here
003b22 0044                      	COLON	4,"/MOD"
                                 SLMOD:
003b23 de87                      	RCALL	OVER
003b24 de8e                      	RCALL	ZLESS
003b25 de7b                      	RCALL	SWAPP
003b26 cfde                      	RJMP	MSMOD
                                 
                                 ;   MOD	( n n -- r )
                                 ;	Signed divide. Return mod only.
                                 
003b27 7640
003b28 4d03
003b29 444f                      	COLON	3,"MOD"
                                 MODD:
003b2a dff8                      	RCALL	SLMOD
003b2b ce68                      	RJMP	DROP
                                 
                                 
                                 ;   /	( n n -- q )
                                 ;	Signed divide. Return quotient only.
                                 
003b2c 7650
003b2d 2f01                      	COLON	1,"/"
                                 SLASH:
003b2e dff4                      	RCALL	SLMOD
003b2f de71                      	RCALL	SWAPP
003b30 ce63                      	RJMP	DROP
                                 
                                 ;; Multiply
                                 
                                 ;   UM*	( u u -- ud )
                                 ;	Unsigned multiply. Return double product.
                                 
003b31 765a
003b32 5503
003b33 2a4d                      	COLON	3,"UM*"
                                 UMSTA:
003b34 018c                          movw 	temp0, tosl
003b35 9189
003b36 9199                          loadtos
                                     ; low bytes
003b37 9f80                          mul 	tosl,temp0
003b38 01f0                          movw 	zl, r0
003b39 2722                          clr 	temp2
003b3a 2733                          clr 	temp3
                                     ; middle bytes
003b3b 9f90                          mul 	tosh, temp0
003b3c 0df0                          add 	zh, r0
003b3d 1d21                          adc 	temp2, r1
003b3e 1d33                          adc 	temp3, zeroh
003b3f 9f81                      	mul 	tosl, temp1
003b40 0df0                      	add 	zh, r0
003b41 1d21                      	adc 	temp2, r1
003b42 1d33                      	adc 	temp3, zeroh
003b43 9f91                      	mul 	tosh, temp1
003b44 0d20                      	add 	temp2, r0
003b45 1d31                      	adc 	temp3, r1
003b46 01cf                      	movw 	tosl, zl
003b47 939a
003b48 938a                      	savetos
003b49 01c9                      	movw 	tosl, temp2
003b4a 9508                      	ret
                                 
                                 ;   *	( n n -- n )
                                 ;	Signed multiply. Return single product.
                                 
003b4b 7664
003b4c 2a01                      	COLON	1,"*"
                                 STAR:
003b4d d004                      	RCALL	MSTAR
003b4e ce45                      	RJMP	DROP
                                 
                                 ;   M*		( n n -- d )
                                 ;	Signed multiply. Return double product.
                                 
003b4f 7698
003b50 4d02
c:\users\rgeorge\Documents\Atmel Studio\7.0\328eForth_ASM\328eForth_ASM\main.asm(147): warning: .cseg .db misalignment - padding zero byte
c:\users\rgeorge\Documents\Atmel Studio\7.0\328eForth_ASM\328eForth_ASM\main.asm(1343): macro 'COLON' called here
003b51 002a                      	COLON	2,"M*"
                                 MSTAR:
003b52 df18                      	RCALL	DDUP
003b53 de77                      	RCALL	XORR
003b54 de5e                      	RCALL	ZLESS
003b55 de29                      	RCALL	TOR
003b56 df45                      	RCALL	ABSS
003b57 de49                      	RCALL	SWAPP
003b58 df43                      	RCALL	ABSS
003b59 dfda                      	RCALL	UMSTA
003b5a de0a                      	RCALL	RFROM
003b5b dcff                      	RCALL	QBRAN
003b5c 3b5e                      	.DW	MSTA1
003b5d df2b                      	RCALL	DNEGA
                                 MSTA1:	
003b5e 9508                      	RET
                                 
                                 ;   */MOD	( n1 n2 n3 -- r q )
                                 ;	Multiply n1 and n2, then divide by n3. Return mod and quotient.
                                 
003b5f 76a0
003b60 2a05
003b61 4d2f
003b62 444f                      	COLON	5,"*/MOD"
                                 SSMOD:
003b63 de1b                      	RCALL	TOR
003b64 dfed                      	RCALL	MSTAR
003b65 ddff                      	RCALL	RFROM
003b66 cf9e                      	RJMP	MSMOD
                                 
                                 ;   */	( n1 n2 n3 -- q )
                                 ;	Multiply n1 by n2, then divide by n3. Return quotient only.
                                 
003b67 76c0
003b68 2a02
c:\users\rgeorge\Documents\Atmel Studio\7.0\328eForth_ASM\328eForth_ASM\main.asm(147): warning: .cseg .db misalignment - padding zero byte
c:\users\rgeorge\Documents\Atmel Studio\7.0\328eForth_ASM\328eForth_ASM\main.asm(1373): macro 'COLON' called here
003b69 002f                      	COLON	2,"*/"
                                 STASL:
003b6a dff8                      	RCALL	SSMOD
003b6b de35                      	RCALL	SWAPP
003b6c ce27                      	RJMP	DROP
                                 
                                 ;; Miscellaneous
                                 
                                 ;   >CHAR	( c -- c )
                                 ;	Filter non-printing characters.
                                 
                                 ;	COLON	5,">CHAR"
                                 TCHAR:
003b6d de2c                      	RCALL	DUPP
003b6e ded3                      	RCALL	BLANK
003b6f dccb                      	RCALL	DOLIT
003b70 007f                      	.DW		$7F
003b71 df6b                      	RCALL	WITHI
003b72 dce8                      	RCALL	QBRAN
003b73 3b75                      	.DW		TCHAR1
003b74 9508                      	RET
                                 TCHAR1:	
003b75 de1e                      	RCALL	DROP
003b76 dcc4                      	RCALL	DOLIT
003b77 005f                      	.DW		'_'
003b78 9508                      	RET
                                 
                                 
                                 ;   DEPTH	( -- n )
                                 ;	Return the depth of the data stack.
                                 
003b79 76d0
003b7a 4405
003b7b 5045
003b7c 4854                      	COLON	5,"DEPTH"
                                 DEPTH:
003b7d de0a                      	RCALL	SPAT
003b7e dcbc                      	RCALL	DOLIT
003b7f 06ee                      	.DW		SPP-2
003b80 de20                      	RCALL	SWAPP
003b81 df11                      	RCALL	SUBB
003b82 ceb6                      	RJMP	TWOSL
                                 
                                 ;   PICK	( ... +n -- ... w )
                                 ;	Copy the nth stack item to tos.
                                 
003b83 76f4
003b84 5004
003b85 4349
c:\users\rgeorge\Documents\Atmel Studio\7.0\328eForth_ASM\328eForth_ASM\main.asm(147): warning: .cseg .db misalignment - padding zero byte
c:\users\rgeorge\Documents\Atmel Studio\7.0\328eForth_ASM\328eForth_ASM\main.asm(1416): macro 'COLON' called here
003b86 004b                      	COLON	4,"PICK"
                                 PICK:
003b87 9601                      	ADIW	TOSL,1
003b88 deaa                      	RCALL	CELLS
003b89 ddfe                      	RCALL	SPAT
003b8a dee4                      	RCALL	PLUS
003b8b cd01                      	RJMP	AT
                                 
                                 ;; Memory access
                                 
                                 ;   +!	( n a -- )
                                 ;	Add n to the contents at address a.
                                 
003b8c 7708
003b8d 2b02
c:\users\rgeorge\Documents\Atmel Studio\7.0\328eForth_ASM\328eForth_ASM\main.asm(147): warning: .cseg .db misalignment - padding zero byte
c:\users\rgeorge\Documents\Atmel Studio\7.0\328eForth_ASM\328eForth_ASM\main.asm(1429): macro 'COLON' called here
003b8e 0021                      	COLON	2,"+!"
                                 PSTOR:
003b8f de11                      	RCALL	SWAPP
003b90 de1a                      	RCALL	OVER
003b91 dcfb                      	RCALL	AT
003b92 dedc                      	RCALL	PLUS
003b93 de0d                      	RCALL	SWAPP
003b94 ccee                      	RJMP	STORE
                                 
                                 ;   COUNT	( b -- b +n )
                                 ;	Return count byte of a string and add 1 to byte address.
                                 
003b95 771a
003b96 4305
003b97 554f
003b98 544e                      	COLON	5,"COUNT"
                                 COUNT:
003b99 01fc                      	movw	zl, tosl
003b9a 9101                      	ld		temp0, z+
003b9b 01cf                      	movw	tosl, zl
003b9c 939a
003b9d 938a                      	savetos
003b9e 2f80                      	mov		tosl, temp0
003b9f 2799                      	clr		tosh
003ba0 9508                      	ret
                                 
                                 ;   ICOUNT	( b -- b +n )
                                 ;	Return count byte of a string and add 1 to byte address.
                                 
003ba1 772c
003ba2 4906
003ba3 4f43
003ba4 4e55
c:\users\rgeorge\Documents\Atmel Studio\7.0\328eForth_ASM\328eForth_ASM\main.asm(147): warning: .cseg .db misalignment - padding zero byte
c:\users\rgeorge\Documents\Atmel Studio\7.0\328eForth_ASM\328eForth_ASM\main.asm(1454): macro 'COLON' called here
003ba5 0054                      	COLON	6,"ICOUNT"
                                 ICOUNT:
003ba6 ddf3                      	RCALL	DUPP
003ba7 9601                      	adiw	tosl,1
003ba8 ddf8                      	RCALL	SWAPP
003ba9 cd02                      	RJMP	ICAT
                                 
                                 ;   HERE	( -- a )
                                 ;	Return the top of the code dictionary.
                                 
003baa 7744
003bab 4804
003bac 5245
c:\users\rgeorge\Documents\Atmel Studio\7.0\328eForth_ASM\328eForth_ASM\main.asm(147): warning: .cseg .db misalignment - padding zero byte
c:\users\rgeorge\Documents\Atmel Studio\7.0\328eForth_ASM\328eForth_ASM\main.asm(1464): macro 'COLON' called here
003bad 0045                      	COLON	4,"HERE"
                                 HEREE:
003bae de79                      	RCALL	DPP
003baf ccdd                      	RJMP	AT
                                 
                                 ;   PAD	( -- a )
                                 ;	Return the address of the text buffer above the code dictionary.
                                 
003bb0 7756
003bb1 5003
003bb2 4441                      	COLON	3,"PAD"
                                 PAD:
003bb3 dffa                      	RCALL	HEREE
003bb4 dc86                      	RCALL	DOLIT
003bb5 0040                      	.DW		$40
003bb6 ceb8                      	RJMP	PLUS
                                 
                                 ;   TIB	( -- a )
                                 ;	Return the address of the terminal input buffer.
                                 
003bb7 7762
003bb8 5403
003bb9 4249                      	COLON	3,"TIB"
                                 TIB:
003bba de4b                      	RCALL	NTIB
003bbb 9602                      	ADIW	TOSL,2
003bbc ccd0                      	RJMP	AT
                                 
                                 ;   @EXECUTE	( a -- )
                                 ;	Execute vector stored in address a.
                                 
003bbd 7770
003bbe 4008
003bbf 5845
003bc0 4345
003bc1 5455
c:\users\rgeorge\Documents\Atmel Studio\7.0\328eForth_ASM\328eForth_ASM\main.asm(147): warning: .cseg .db misalignment - padding zero byte
c:\users\rgeorge\Documents\Atmel Studio\7.0\328eForth_ASM\328eForth_ASM\main.asm(1491): macro 'COLON' called here
003bc2 0045                      	COLON	8,"@EXECUTE"
                                 ATEXE:
003bc3 dcc9                      	RCALL	AT
003bc4 de86                      	RCALL	QDUP	;?address or zero
003bc5 dc95                      	RCALL	QBRAN
003bc6 3bc8                      	.DW		EXE1
003bc7 dcab                      	RCALL	EXECU	;execute if non-zero
                                 EXE1:
003bc8 9508                      	RET				;do nothing if zero
                                 
                                 ;   CMOVE	( b1 b2 u -- )
                                 ;	Copy u bytes from b1 to b2.
                                 
003bc9 777c
003bca 4305
003bcb 4f4d
003bcc 4556                      	COLON	5,"CMOVE"
                                 CMOVE:
003bcd ddb1                      	RCALL	TOR
003bce c006                      	RJMP	CMOV2
                                 CMOV1:
003bcf ddaf                      	RCALL	TOR
003bd0 dfc8                      	RCALL	COUNT
003bd1 dd9f                      	RCALL	RAT
003bd2 dd81                      	RCALL	CSTOR
003bd3 dd91                      	RCALL	RFROM
003bd4 9601                      	ADIW	TOSL,1
                                 CMOV2:
003bd5 dc72                      	RCALL	DONXT
003bd6 3bcf                      	.DW		CMOV1
003bd7 ce8a                      	RJMP	DDROP
                                 
                                 ;	UPPER	( c -- c' )
                                 ;	Change character to upper case
                                 
                                 ;	COLON	5,"UPPER"
                                 UPPER:
003bd8 ddc1                      	RCALL	DUPP
003bd9 dc61                      	RCALL	DOLIT
003bda 0061                      	.DW		$61
003bdb dc5f                      	RCALL	DOLIT
003bdc 007b                      	.DW		$7B
003bdd deff                      	RCALL	WITHI
003bde dc7c                      	RCALL	QBRAN
003bdf 3be3                      	.DW		UPPER1
003be0 dc5a                      	RCALL	DOLIT
003be1 005f                      	.DW		$5F
003be2 ddd8                      	RCALL	ANDD
                                 UPPER1:
003be3 9508                      	RET
                                 
                                 ;   UMOVE	( a b u -- )
                                 ;	Copy u bytes from b1 to b2, changing to upper case.
                                 
                                 ;	COLON	5,"UMOVE"
                                 UMOVE:
003be4 dd9a                      	RCALL	TOR
003be5 c007                      	RJMP	UMOV2
                                 UMOV1:
003be6 dd98                      	RCALL	TOR
003be7 dfb1                      	RCALL	COUNT
003be8 dfef                      	RCALL	UPPER
003be9 dd87                      	RCALL	RAT
003bea dd69                      	RCALL	CSTOR
003beb dd79                      	RCALL	RFROM
003bec 9601                      	ADIW	TOSL,1
                                 UMOV2:
003bed dc5a                      	RCALL	DONXT
003bee 3be6                      	.DW		UMOV1
003bef ce72                      	RJMP	DDROP
                                 
                                 ;   FILL	( b u c -- )
                                 ;	Fill u bytes of character c to area beginning at b.
                                 
003bf0 7794
003bf1 4604
003bf2 4c49
c:\users\rgeorge\Documents\Atmel Studio\7.0\328eForth_ASM\328eForth_ASM\main.asm(147): warning: .cseg .db misalignment - padding zero byte
c:\users\rgeorge\Documents\Atmel Studio\7.0\328eForth_ASM\328eForth_ASM\main.asm(1562): macro 'COLON' called here
003bf3 004c                      	COLON	4,"FILL"
                                 FILL:
003bf4 ddac                      	RCALL	SWAPP
003bf5 dd89                      	RCALL	TOR
003bf6 ddaa                      	RCALL	SWAPP
003bf7 c003                      	RJMP	FILL2
                                 FILL1:
003bf8 de72                      	RCALL	DDUP
003bf9 dd5a                      	RCALL	CSTOR
003bfa 9601                      	ADIW	TOSL,1
                                 FILL2:
003bfb dc4c                      	RCALL	DONXT
003bfc 3bf8                      	.DW		FILL1
003bfd ce64                      	RJMP	DDROP
                                 
                                 ;; Numeric output, single precision
                                 
                                 ;   DIGIT	( u -- c )
                                 ;	Convert digit u to a character.
                                 
                                 ;	COLON	5,"DIGIT"
                                 DIGIT:
003bfe dc3c                      	RCALL	DOLIT
003bff 0009                      	.DW		9
003c00 ddaa                      	RCALL	OVER
003c01 deba                      	RCALL	LESS
003c02 dc38                      	RCALL	DOLIT
003c03 0007                      	.DW		7
003c04 ddb6                      	RCALL	ANDD
003c05 de69                      	RCALL	PLUS
003c06 dc34                      	RCALL	DOLIT
003c07 0030                      	.DW		'0'
003c08 ce66                      	RJMP	PLUS
                                 
                                 ;   EXTRACT	( n base -- n c )
                                 ;	Extract the least significant digit from n.
                                 
                                 ;	COLON	7,"EXTRACT"
                                 EXTRC:
003c09 dc31                      	RCALL	DOLIT
003c0a 0000                      	.DW		0
003c0b dd95                      	RCALL	SWAPP
003c0c dedb                      	RCALL	UMMOD
003c0d dd93                      	RCALL	SWAPP
003c0e cfef                      	RJMP	DIGIT
                                 
                                 ;   <#	( -- )
                                 ;	Initiate the numeric output process.
                                 
003c0f 77e2
003c10 3c02
c:\users\rgeorge\Documents\Atmel Studio\7.0\328eForth_ASM\328eForth_ASM\main.asm(147): warning: .cseg .db misalignment - padding zero byte
c:\users\rgeorge\Documents\Atmel Studio\7.0\328eForth_ASM\328eForth_ASM\main.asm(1611): macro 'COLON' called here
003c11 0023                      	COLON	2,"<#"
                                 BDIGS:
003c12 dfa0                      	RCALL	PAD
003c13 de03                      	RCALL	HLD
003c14 cc6e                      	RJMP	STORE
                                 
                                 ;   HOLD	( c -- )
                                 ;	Insert a character into the numeric output string.
                                 
003c15 7820
003c16 4804
003c17 4c4f
c:\users\rgeorge\Documents\Atmel Studio\7.0\328eForth_ASM\328eForth_ASM\main.asm(147): warning: .cseg .db misalignment - padding zero byte
c:\users\rgeorge\Documents\Atmel Studio\7.0\328eForth_ASM\328eForth_ASM\main.asm(1620): macro 'COLON' called here
003c18 0044                      	COLON	4,"HOLD"
                                 HOLD:
003c19 ddfd                      	RCALL	HLD
003c1a dc72                      	RCALL	AT
003c1b 9701                      	SBIW	TOSL,1
003c1c dd7d                      	RCALL	DUPP
003c1d ddf9                      	RCALL	HLD
003c1e dc64                      	RCALL	STORE
003c1f cd34                      	RJMP	CSTOR
                                 
                                 ;   #	( u -- u )
                                 ;	Extract one digit from u and append the digit to output string.
                                 
003c20 782c
003c21 2301                      	COLON	1,"#"
                                 DIG:
003c22 ddcd                      	RCALL	BASE
003c23 dc69                      	RCALL	AT
003c24 dfe4                      	RCALL	EXTRC
003c25 cff3                      	RJMP	HOLD
                                 
                                 ;   #S	( u -- 0 )
                                 ;	Convert u until all digits are added to the output string.
                                 
003c26 7842
003c27 2302
c:\users\rgeorge\Documents\Atmel Studio\7.0\328eForth_ASM\328eForth_ASM\main.asm(147): warning: .cseg .db misalignment - padding zero byte
c:\users\rgeorge\Documents\Atmel Studio\7.0\328eForth_ASM\328eForth_ASM\main.asm(1643): macro 'COLON' called here
003c28 0053                      	COLON	2,"#S"
                                 DIGS:
                                 DIGS1:
003c29 dff8                      	RCALL	DIG
003c2a dd6f                      	RCALL	DUPP
003c2b dc2f                      	RCALL	QBRAN
003c2c 3c2e                      	.DW		DIGS2
003c2d cffb                      	RJMP	DIGS1
                                 DIGS2:
003c2e 9508                      	RET
                                 
                                 ;   SIGN	( n -- )
                                 ;	Add a minus sign to the numeric output string.
                                 
003c2f 784e
003c30 5304
003c31 4749
c:\users\rgeorge\Documents\Atmel Studio\7.0\328eForth_ASM\328eForth_ASM\main.asm(147): warning: .cseg .db misalignment - padding zero byte
c:\users\rgeorge\Documents\Atmel Studio\7.0\328eForth_ASM\328eForth_ASM\main.asm(1657): macro 'COLON' called here
003c32 004e                      	COLON	4,"SIGN"
                                 SIGN:
003c33 dd7f                      	RCALL	ZLESS
003c34 dc26                      	RCALL	QBRAN
003c35 3c39                      	.DW		SIGN1
003c36 dc04                      	RCALL	DOLIT
003c37 002d                      	.DW		'-'
003c38 dfe0                      	RCALL	HOLD
003c39 9508                      SIGN1:	RET
                                 
                                 ;   #>	( w -- b u )
                                 ;	Prepare the output string to be TYPE'd.
                                 
003c3a 7860
003c3b 2302
c:\users\rgeorge\Documents\Atmel Studio\7.0\328eForth_ASM\328eForth_ASM\main.asm(147): warning: .cseg .db misalignment - padding zero byte
c:\users\rgeorge\Documents\Atmel Studio\7.0\328eForth_ASM\328eForth_ASM\main.asm(1670): macro 'COLON' called here
003c3c 003e                      	COLON	2,"#>"
                                 EDIGS:
003c3d dd56                      	RCALL	DROP
003c3e ddd8                      	RCALL	HLD
003c3f dc4d                      	RCALL	AT
003c40 df72                      	RCALL	PAD
003c41 dd69                      	RCALL	OVER
003c42 ce50                      	RJMP	SUBB
                                 
                                 ;   str		( w -- b u )
                                 ;	Convert a signed integer to a numeric string.
                                 
                                 ;	COLON	3,"str"
                                 STR:
003c43 dd56                      	RCALL	DUPP
003c44 dd3a                      	RCALL	TOR
003c45 de56                      	RCALL	ABSS
003c46 dfcb                      	RCALL	BDIGS
003c47 dfe1                      	RCALL	DIGS
003c48 dd1c                      	RCALL	RFROM
003c49 dfe9                      	RCALL	SIGN
003c4a cff2                      	RJMP	EDIGS
                                 
                                 ;   HEX		( -- )
                                 ;	Use radix 16 as base for numeric conversions.
                                 
003c4b 7876
003c4c 4803
003c4d 5845                      	COLON	3,"HEX"
                                 HEX:
003c4e dbec                      	RCALL	DOLIT
003c4f 0010                      	.DW	16
003c50 dd9f                      	RCALL	BASE
003c51 cc31                      	RJMP	STORE
                                 
                                 ;   DECIMAL	( -- )
                                 ;	Use radix 10 as base for numeric conversions.
                                 
003c52 7898
003c53 4407
003c54 4345
003c55 4d49
003c56 4c41                      	COLON	7,"DECIMAL"
                                 DECIM:
003c57 dbe3                      	RCALL	DOLIT
003c58 000a                      	.DW	10
003c59 dd96                      	RCALL	BASE
003c5a cc28                      	RJMP	STORE
                                 
                                 ;; Numeric input, single precision
                                 
                                 ;   DIGIT?	( c base -- u t )
                                 ;	Convert a character to its numeric value. A flag indicates success.
                                 
                                 ;	COLON	6,"DIGIT?"
                                 DIGTQ:
003c5b dd23                      	RCALL	TOR
003c5c dbde                      	RCALL	DOLIT
003c5d 0030                      	.DW		'0'
003c5e de34                      	RCALL	SUBB
003c5f dbdb                      	RCALL	DOLIT
003c60 0009                      	.DW		9
003c61 dd49                      	RCALL	OVER
003c62 de59                      	RCALL	LESS
003c63 dbf7                      	RCALL	QBRAN
003c64 3c6d                      	.DW		DGTQ1
003c65 dbd5                      	RCALL	DOLIT
003c66 0007                      	.DW		7
003c67 de2b                      	RCALL	SUBB
003c68 dd31                      	RCALL	DUPP
003c69 dbd1                      	RCALL	DOLIT
003c6a 000a                      	.DW		10
003c6b de50                      	RCALL	LESS
003c6c dd56                      	RCALL	ORR
                                 DGTQ1:
003c6d dd2c                      	RCALL	DUPP
003c6e dcf6                      	RCALL	RFROM
003c6f ce40                      	RJMP	ULESS
                                 
                                 ;   NUMBER?	( a -- n T | a F )
                                 ;	Convert a number string to integer. Push a flag on tos.
                                 
003c70 78a6
003c71 4e07
003c72 4d55
003c73 4542
003c74 3f52                      	COLON	7,"NUMBER?"
                                 NUMBQ:
003c75 dd7a                      	RCALL	BASE
003c76 dc16                      	RCALL	AT
003c77 dd07                      	RCALL	TOR
003c78 dbc2                      	RCALL	DOLIT
003c79 0000                      	.DW		0
003c7a dd30                      	RCALL	OVER
003c7b df1d                      	RCALL	COUNT
003c7c dd2e                      	RCALL	OVER
003c7d dce0                      	RCALL	CAT
003c7e dbbc                      	RCALL	DOLIT
003c7f 0024                      	.DW		'$'
003c80 de23                      	RCALL	EQUAL
003c81 dbd9                      	RCALL	QBRAN
003c82 3c88                      	.DW		NUMQ1
003c83 dfca                      	RCALL	HEX
003c84 dd1c                      	RCALL	SWAPP
003c85 9601                      	adiw	tosl,1
003c86 dd1a                      	RCALL	SWAPP
003c87 9701                      	sbiw	tosl,1
                                 NUMQ1:
003c88 dd22                      	RCALL	OVER
003c89 dcd4                      	RCALL	CAT
003c8a dbb0                      	RCALL	DOLIT
003c8b 002d                      	.DW		'-'
003c8c de17                      	RCALL	EQUAL
003c8d dcf1                      	RCALL	TOR
003c8e dd12                      	RCALL	SWAPP
003c8f dce1                      	RCALL	RAT
003c90 de02                      	RCALL	SUBB
003c91 dd0f                      	RCALL	SWAPP
003c92 dcde                      	RCALL	RAT
003c93 dddb                      	RCALL	PLUS
003c94 ddb6                      	RCALL	QDUP
003c95 dbc5                      	RCALL	QBRAN
003c96 3cb8                      	.DW		NUMQ6
003c97 9701                      	sbiw	tosl,1
003c98 dce6                      	RCALL	TOR
                                 NUMQ2:
003c99 dd00                      	RCALL	DUPP
003c9a dce4                      	RCALL	TOR
003c9b dcc2                      	RCALL	CAT
003c9c dd53                      	RCALL	BASE
003c9d dbef                      	RCALL	AT
003c9e dfbc                      	RCALL	DIGTQ
003c9f dbbb                      	RCALL	QBRAN
003ca0 3cb1                      	.DW		NUMQ4
003ca1 dcff                      	RCALL	SWAPP
003ca2 dd4d                      	RCALL	BASE
003ca3 dbe9                      	RCALL	AT
003ca4 dea8                      	RCALL	STAR
003ca5 ddc9                      	RCALL	PLUS
003ca6 dcbe                      	RCALL	RFROM
003ca7 9601                      	adiw	tosl,1
003ca8 db9f                      	RCALL	DONXT
003ca9 3c99                      	.DW		NUMQ2
003caa dce9                      	RCALL	DROP
003cab dcc5                      	RCALL	RAT
003cac dbae                      	RCALL	QBRAN
003cad 3caf                      	.DW		NUMQ3
003cae ddd2                      	RCALL	NEGAT
                                 NUMQ3:
003caf dcf1                      	RCALL	SWAPP
003cb0 c006                      	RJMP	NUMQ5
                                 NUMQ4:
003cb1 dcb3                      	RCALL	RFROM
003cb2 dcb2                      	RCALL	RFROM
003cb3 ddae                      	RCALL	DDROP
003cb4 ddad                      	RCALL	DDROP
003cb5 db85                      	RCALL	DOLIT
003cb6 0000                      	.DW		0
                                 NUMQ5:
003cb7 dce2                      	RCALL	DUPP
                                 NUMQ6:
003cb8 dcac                      	RCALL	RFROM
003cb9 dda8                      	RCALL	DDROP
003cba dcaa                      	RCALL	RFROM
003cbb dd34                      	RCALL	BASE
003cbc cbc6                      	RJMP	STORE
                                 
                                 ;; Basic I/O
                                 
                                 ;   KEY	( -- c )
                                 ;	Wait for and return an input character.
                                 
003cbd 78e2
003cbe 4b03
003cbf 5945                      	COLON	3,"KEY"
                                 KEY:
                                 KEY1:
003cc0 db50                      	RCALL	QRX
003cc1 db99                      	RCALL	QBRAN
003cc2 3cc0                      	.DW		KEY1
003cc3 9508                      	RET
                                 
                                 ;   SPACE	( -- )
                                 ;	Send the blank character to the output device.
                                 
003cc4 797c
003cc5 5305
003cc6 4150
003cc7 4543                      	COLON	5,"SPACE"
                                 SPACE:
003cc8 dd79                      	RCALL	BLANK
003cc9 cb5b                      	RJMP	EMIT
                                 
                                 ;   CHARS	( +n c -- )
                                 ;	Send n characters to the output device.
                                 
                                 ;	COLON	5,"CHARS"
                                 CHARS:
003cca dcd6                      	RCALL	SWAPP
003ccb dcb3                      	RCALL	TOR
003ccc c002                      	RJMP	CHAR2
                                 CHAR1:
003ccd dccc                      	RCALL	DUPP
003cce db56                      	RCALL	EMIT
                                 CHAR2:
003ccf db78                      	RCALL	DONXT
003cd0 3ccd                      	.DW		CHAR1
003cd1 ccc2                      	RJMP	DROP
                                 
                                 ;   SPACES	( +n -- )
                                 ;	Send n spaces to the output device.
                                 
003cd2 798a
003cd3 5306
003cd4 4150
003cd5 4543
c:\users\rgeorge\Documents\Atmel Studio\7.0\328eForth_ASM\328eForth_ASM\main.asm(147): warning: .cseg .db misalignment - padding zero byte
c:\users\rgeorge\Documents\Atmel Studio\7.0\328eForth_ASM\328eForth_ASM\main.asm(1867): macro 'COLON' called here
003cd6 0053                      	COLON	6,"SPACES"
                                 SPACS:
003cd7 dd6a                      	RCALL	BLANK
003cd8 cff1                      	RJMP	CHARS
                                 
                                 ;   TYPE	( b u -- )
                                 ;	Output u characters from b.
                                 
003cd9 79a6
003cda 5404
003cdb 5059
c:\users\rgeorge\Documents\Atmel Studio\7.0\328eForth_ASM\328eForth_ASM\main.asm(147): warning: .cseg .db misalignment - padding zero byte
c:\users\rgeorge\Documents\Atmel Studio\7.0\328eForth_ASM\328eForth_ASM\main.asm(1875): macro 'COLON' called here
003cdc 0045                      	COLON	4,"TYPE"
                                 TYPES:
003cdd dca1                      	RCALL	TOR
003cde c003                      	RJMP	TYPE2
                                 TYPE1:
003cdf deb9                      	RCALL	COUNT
003ce0 de8c                      	RCALL	TCHAR
003ce1 db43                      	RCALL	EMIT
                                 TYPE2:
003ce2 db65                      	RCALL	DONXT
003ce3 3cdf                      	.DW		TYPE1
003ce4 ccaf                      	RJMP	DROP
                                 
                                 ;   ITYPE	( b u -- )
                                 ;	Output u characters from b.
                                 
003ce5 79b4
003ce6 4905
003ce7 5954
003ce8 4550                      	COLON	5,"ITYPE"
                                 ITYPES:
003ce9 dc95                      	RCALL	TOR
003cea c003                      	RJMP	ITYPE2
                                 ITYPE1:
003ceb deba                      	RCALL	ICOUNT
003cec de80                      	RCALL	TCHAR
003ced db37                      	RCALL	EMIT
                                 ITYPE2:
003cee db59                      	RCALL	DONXT
003cef 3ceb                      	.DW		ITYPE1
003cf0 cca3                      	RJMP	DROP
                                 
                                 ;   CR	( -- )
                                 ;	Output a carriage return and a line feed.
                                 
003cf1 79cc
003cf2 4302
c:\users\rgeorge\Documents\Atmel Studio\7.0\328eForth_ASM\328eForth_ASM\main.asm(147): warning: .cseg .db misalignment - padding zero byte
c:\users\rgeorge\Documents\Atmel Studio\7.0\328eForth_ASM\328eForth_ASM\main.asm(1907): macro 'COLON' called here
003cf3 0052                      	COLON	2,"CR"
                                 CR:
003cf4 db46                      	RCALL	DOLIT
003cf5 000d                      	.DW		CRR
003cf6 db2e                      	RCALL	EMIT
003cf7 db43                      	RCALL	DOLIT
003cf8 000a                      	.DW		LF
003cf9 cb2b                      	RJMP	EMIT
                                 
                                 ;   do$	( -- a )
                                 ;	Return the address of a compiled string.
                                 
                                 ;	COLON	COMPO+3,"do$"
                                 DOSTR:
003cfa dc6a                      	RCALL	RFROM	;ra
003cfb dc69                      	RCALL	RFROM	;ra a
003cfc dc9d                      	RCALL	DUPP	;ra a a
003cfd dc9c                      	RCALL	DUPP	;ra a a a
003cfe 01fc                      	movw	zl,tosl
003cff 0fee
003d00 1fff
003d01 9185
003d02 9195                      	readflashcell	tosl,tosh
003d03 2799                      	clr		tosh	;ra a a count
003d04 dd34                      	RCALL	TWOSL
003d05 dd69                      	RCALL	PLUS
003d06 9601                      	ADIW	TOSL,1	;ra a a' 
003d07 dc77                      	RCALL	TOR	;ra a
003d08 dc98                      	RCALL	SWAPP	;a ra
003d09 dc75                      	RCALL	TOR	;a
003d0a dd28                      	RCALL	CELLS	;byte address
003d0b 9508                      	RET
                                 
                                 ;   $"|	( -- a )
                                 ;	Run time routine compiled by $". Return address of a compiled string.
                                 
                                 ;	COLON	COMPO+3,'$'
                                 ;	.DB		'"','|'
                                 STRQP:
003d0c dfed                      	RCALL	DOSTR
003d0d 9508                      	RET				;force a call to do$
                                 
                                 ;   ."|	( -- )
                                 ;	Run time routine of ." . Output a compiled string.
                                 
                                 ;	COLON	COMPO+3,'.'
                                 ;	.DB		'"','|'
                                 DOTQP:
003d0e dfeb                      	RCALL	DOSTR
003d0f de96                      	RCALL	ICOUNT
003d10 cfd8                      	RJMP	ITYPES
                                 
                                 ;   .R		( n +n -- )
                                 ;	Display an integer in a field of n columns, right justified.
                                 
003d11 79e4
003d12 2e02
c:\users\rgeorge\Documents\Atmel Studio\7.0\328eForth_ASM\328eForth_ASM\main.asm(147): warning: .cseg .db misalignment - padding zero byte
c:\users\rgeorge\Documents\Atmel Studio\7.0\328eForth_ASM\328eForth_ASM\main.asm(1959): macro 'COLON' called here
003d13 0052                      	COLON	2,".R"
                                 DOTR:
003d14 dc6a                      	RCALL	TOR
003d15 df2d                      	RCALL	STR
003d16 dc4e                      	RCALL	RFROM
003d17 dc93                      	RCALL	OVER
003d18 dd7a                      	RCALL	SUBB
003d19 dfbd                      	RCALL	SPACS
003d1a cfc2                      	RJMP	TYPES
                                 
                                 ;   U.R	( u +n -- )
                                 ;	Display an unsigned integer in n column, right justified.
                                 
003d1b 7a24
003d1c 5503
003d1d 522e                      	COLON	3,"U.R"
                                 UDOTR:
003d1e dc60                      	RCALL	TOR
003d1f def2                      	RCALL	BDIGS
003d20 df08                      	RCALL	DIGS
003d21 df1b                      	RCALL	EDIGS
003d22 dc42                      	RCALL	RFROM
003d23 dc87                      	RCALL	OVER
003d24 dd6e                      	RCALL	SUBB
003d25 dfb1                      	RCALL	SPACS
003d26 cfb6                      	RJMP	TYPES
                                 
                                 ;   U.	( u -- )
                                 ;	Display an unsigned integer in free format.
                                 
003d27 7a38
003d28 5502
c:\users\rgeorge\Documents\Atmel Studio\7.0\328eForth_ASM\328eForth_ASM\main.asm(147): warning: .cseg .db misalignment - padding zero byte
c:\users\rgeorge\Documents\Atmel Studio\7.0\328eForth_ASM\328eForth_ASM\main.asm(1987): macro 'COLON' called here
003d29 002e                      	COLON	2,"U."
                                 UDOT:
003d2a dee7                      	RCALL	BDIGS
003d2b defd                      	RCALL	DIGS
003d2c df10                      	RCALL	EDIGS
003d2d df9a                      	RCALL	SPACE
003d2e cfae                      	RJMP	TYPES
                                 
                                 ;   .		( w -- )
                                 ;	Display an integer in free format, preceeded by a space.
                                 
003d2f 7a50
003d30 2e01                      	COLON	1,"."
                                 DOT:
003d31 dcbe                      	RCALL	BASE
003d32 db5a                      	RCALL	AT
003d33 db07                      	RCALL	DOLIT
003d34 000a                      	.DW	10
003d35 dc95                      	RCALL	XORR	;?decimal
003d36 db24                      	RCALL	QBRAN
003d37 3d39                      	.DW	DOT1
003d38 cff1                      	RJMP	UDOT
                                 DOT1:	
003d39 df09                      	RCALL	STR
003d3a df8d                      	RCALL	SPACE
003d3b cfa1                      	RJMP	TYPES
                                 
                                 ;   ?	( a -- )
                                 ;	Display the contents in a memory cell.
                                 
003d3c 7a60
003d3d 3f01                      	COLON	1,"?"
                                 QUEST:
003d3e db4e                      	RCALL	AT
003d3f cff1                      	RJMP	DOT
                                 
                                 ;; Parsing
                                 
                                 ;   parse	( b u c -- b u delta ; <string> )
                                 ;	Scan string delimited by c. Return found string and its offset.
                                 
                                 ;	COLON	5,"parse"
                                 PARS:
003d40 dcb4                      	RCALL	TEMP
003d41 db41                      	RCALL	STORE
003d42 dc68                      	RCALL	OVER
003d43 dc3b                      	RCALL	TOR
003d44 dc55                      	RCALL	DUPP
003d45 db15                      	RCALL	QBRAN
003d46 3d82                      	.DW		PARS8
003d47 9701                      	SBIW	TOSL,1
003d48 dcac                      	RCALL	TEMP
003d49 dc14                      	RCALL	CAT
003d4a dcf7                      	RCALL	BLANK
003d4b dd58                      	RCALL	EQUAL
003d4c db0e                      	RCALL	QBRAN
003d4d 3d61                      	.DW		PARS3
003d4e dc30                      	RCALL	TOR
                                 PARS1:
003d4f dcf2                      	RCALL	BLANK
003d50 dc5a                      	RCALL	OVER
003d51 dc0c                      	RCALL	CAT	;skip leading blanks ONLY
003d52 dd40                      	RCALL	SUBB
003d53 dc5f                      	RCALL	ZLESS
003d54 dd24                      	RCALL	INVER
003d55 db05                      	RCALL	QBRAN
003d56 3d60                      	.DW		PARS2
003d57 9601                      	ADIW	TOSL,1
003d58 daef                      	RCALL	DONXT
003d59 3d4f                      	.DW		PARS1
003d5a dc0a                      	RCALL	RFROM
003d5b dc38                      	RCALL	DROP
003d5c dade                      	RCALL	DOLIT
003d5d 0000                      	.DW		0
003d5e dc3b                      	RCALL	DUPP
003d5f 9508                      	RET
                                 PARS2:
003d60 dc04                      	RCALL	RFROM
                                 PARS3:
003d61 dc49                      	RCALL	OVER
003d62 dc3e                      	RCALL	SWAPP
003d63 dc1b                      	RCALL	TOR
                                 PARS4:
003d64 dc90                      	RCALL	TEMP
003d65 dbf8                      	RCALL	CAT
003d66 dc44                      	RCALL	OVER
003d67 dbf6                      	RCALL	CAT
003d68 dd2a                      	RCALL	SUBB	;scan for delimiter
003d69 dc8b                      	RCALL	TEMP
003d6a dbf3                      	RCALL	CAT
003d6b dcd6                      	RCALL	BLANK
003d6c dd37                      	RCALL	EQUAL
003d6d daed                      	RCALL	QBRAN
003d6e 3d70                      	.DW		PARS5
003d6f dc43                      	RCALL	ZLESS
                                 PARS5:
003d70 daea                      	RCALL	QBRAN
003d71 3d78                      	.DW		PARS6
003d72 9601                      	ADIW	TOSL,1
003d73 dad4                      	RCALL	DONXT
003d74 3d64                      	.DW		PARS4
003d75 dc24                      	RCALL	DUPP
003d76 dc08                      	RCALL	TOR
003d77 c005                      	RJMP	PARS7
                                 PARS6:
003d78 dbec                      	RCALL	RFROM
003d79 dc1a                      	RCALL	DROP
003d7a dc1f                      	RCALL	DUPP
003d7b 9601                      	ADIW	TOSL,1
003d7c dc02                      	RCALL	TOR
                                 PARS7:
003d7d dc2d                      	RCALL	OVER
003d7e dd14                      	RCALL	SUBB
003d7f dbe5                      	RCALL	RFROM
003d80 dbe4                      	RCALL	RFROM
003d81 cd11                      	RJMP	SUBB
                                 PARS8:
003d82 dc28                      	RCALL	OVER
003d83 dbe1                      	RCALL	RFROM
003d84 cd0e                      	RJMP	SUBB
                                 
                                 ;   PARSE	( c -- b u ; <string> )
                                 ;	Scan input stream and return counted string delimited by c.
                                 
                                 ;	COLON	5,"PARSE"
                                 PARSE:
003d85 dbf9                      	RCALL	TOR
003d86 de33                      	RCALL	TIB
003d87 dc78                      	RCALL	INN
003d88 db04                      	RCALL	AT
003d89 dce5                      	RCALL	PLUS	;current input buffer pointer
003d8a dc7b                      	RCALL	NTIB
003d8b db01                      	RCALL	AT
003d8c dc73                      	RCALL	INN
003d8d daff                      	RCALL	AT
003d8e dd04                      	RCALL	SUBB	;remaining count
003d8f dbd5                      	RCALL	RFROM
003d90 dfaf                      	RCALL	PARS
003d91 dc6e                      	RCALL	INN
003d92 cdfc                      	RJMP	PSTOR
                                 
                                 ;   .(	( -- )
                                 ;	Output following string up to next ) .
                                 
003d93 7a7a
003d94 2e82
c:\users\rgeorge\Documents\Atmel Studio\7.0\328eForth_ASM\328eForth_ASM\main.asm(147): warning: .cseg .db misalignment - padding zero byte
c:\users\rgeorge\Documents\Atmel Studio\7.0\328eForth_ASM\328eForth_ASM\main.asm(2129): macro 'COLON' called here
003d95 0028                      	COLON	IMEDD+2,".("
                                 DOTPR:
003d96 daa4                      	RCALL	DOLIT
003d97 0029                      	.DW		')'
003d98 dfec                      	RCALL	PARSE
003d99 cf43                      	RJMP	TYPES
                                 
                                 ;   (	( -- )
                                 ;	Ignore following string up to next ) . A comment.
                                 
003d9a 7b28
003d9b 2881                      	COLON	IMEDD+1,"("
                                 PAREN:
003d9c da9e                      	RCALL	DOLIT
003d9d 0029                      	.DW		')'
003d9e dfe6                      	RCALL	PARSE
003d9f ccc2                      	RJMP	DDROP
                                 
                                 ;   \	( -- )
                                 ;	Ignore following text till the end of line.
                                 
003da0 7b36
003da1 5c81
c:\users\rgeorge\Documents\Atmel Studio\7.0\328eForth_ASM\328eForth_ASM\main.asm(147): warning: .cseg .db misalignment - padding zero byte
c:\users\rgeorge\Documents\Atmel Studio\7.0\328eForth_ASM\328eForth_ASM\main.asm(2149): macro 'COLON' called here
003da2 005c                      	COLON	IMEDD+1,"\\"
                                 BKSLA:
003da3 da97                      	RCALL	DOLIT
003da4 000d                      	.DW		$D
003da5 dfdf                      	RCALL	PARSE
003da6 ccbb                      	RJMP	DDROP
                                 
                                 
                                 ;   CHAR	( -- c )
                                 ;	Parse next word and return its first character.
                                 
003da7 7b42
003da8 4304
003da9 4148
c:\users\rgeorge\Documents\Atmel Studio\7.0\328eForth_ASM\328eForth_ASM\main.asm(147): warning: .cseg .db misalignment - padding zero byte
c:\users\rgeorge\Documents\Atmel Studio\7.0\328eForth_ASM\328eForth_ASM\main.asm(2160): macro 'COLON' called here
003daa 0052                      	COLON	4,"CHAR"
                                 CHARR:
003dab dc96                      	RCALL	BLANK
003dac dfd8                      	RCALL	PARSE
003dad dbe6                      	RCALL	DROP
003dae cbaf                      	RJMP	CAT
                                 
                                 ;   TOKEN	( -- a ; <string> )
                                 ;	Parse a word from input stream and copy it to name dictionary.
                                 
                                 ;	COLON	5,"TOKEN"
                                 TOKEN:
003daf dc92                      	RCALL	BLANK
003db0 dfd4                      	RCALL	PARSE
003db1 da89                      	RCALL	DOLIT
003db2 001f                      	.DW		31
003db3 dd1d                      	RCALL	MIN
003db4 ddf9                      	RCALL	HEREE
003db5 dcb5                      	RCALL 	DDUP
003db6 db9d                      	RCALL	CSTOR
003db7 dcb3                      	RCALL 	DDUP
003db8 dcb6                      	RCALL	PLUS
003db9 9601                      	ADIW	TOSL,1
003dba da80                      	RCALL	DOLIT
003dbb 0000                      	.DW		0
003dbc dbe4                      	RCALL	SWAPP
003dbd db96                      	RCALL	CSTOR
003dbe 9601                      	ADIW	TOSL,1
003dbf dbe1                      	RCALL	SWAPP
003dc0 de23                      	RCALL	UMOVE
003dc1 cdec                      	RJMP	HEREE
                                 
                                 ;   WORD	( c -- a ; <string> )
                                 ;	Parse a word from input stream and copy it to code dictionary.
                                 
003dc2 7b50
003dc3 5704
003dc4 524f
c:\users\rgeorge\Documents\Atmel Studio\7.0\328eForth_ASM\328eForth_ASM\main.asm(147): warning: .cseg .db misalignment - padding zero byte
c:\users\rgeorge\Documents\Atmel Studio\7.0\328eForth_ASM\328eForth_ASM\main.asm(2195): macro 'COLON' called here
003dc5 0044                      	COLON	4,"WORD"
                                 WORDD:
003dc6 dfbe                      	RCALL	PARSE
003dc7 dde6                      	RCALL	HEREE
003dc8 dca2                      	RCALL 	DDUP
003dc9 db8a                      	RCALL	CSTOR
003dca dca0                      	RCALL 	DDUP
003dcb dca3                      	RCALL	PLUS
003dcc 9601                      	ADIW	TOSL,1
003dcd da6d                      	RCALL	DOLIT
003dce 0000                      	.DW		0
003dcf dbd1                      	RCALL	SWAPP
003dd0 db83                      	RCALL	CSTOR
003dd1 9601                      	ADIW	TOSL,1
003dd2 dbce                      	RCALL	SWAPP
003dd3 ddf9                      	RCALL	CMOVE
003dd4 cdd9                      	RJMP	HEREE
                                 
                                 ;; Dictionary search
                                 
                                 ;   NAME>	( na -- ca )
                                 ;	Return a code address given a name address.
                                 
003dd5 7b86
003dd6 4e05
003dd7 4d41
003dd8 3e45                      	COLON	5,"NAME>"
                                 NAMET:
003dd9 ddcc                      	RCALL	ICOUNT
003dda da60                      	RCALL	DOLIT
003ddb 001f                      	.DW		$1F
003ddc dbde                      	RCALL	ANDD
003ddd dc91                      	RCALL	PLUS
003dde cc5d                      	RJMP	ALGND
                                 
                                 ;   SAME?	( b a u -- b a f \ -0+ )
                                 ;	Compare u bytes in two strings. Return 0 if identical.
                                 
                                 ;	COLON	5,"SAME?"
                                 SAMEQ:
003ddf dc59                      	RCALL	TWOSL
003de0 db9e                      	RCALL	TOR
003de1 c010                      	RJMP	SAME2
                                 SAME1:
003de2 dbc8                      	RCALL	OVER
003de3 db8d                      	RCALL	RAT
003de4 dc4e                      	RCALL	CELLS
003de5 dc89                      	RCALL	PLUS
003de6 daa6                      	RCALL	AT
003de7 dbc3                      	RCALL	OVER
003de8 db88                      	RCALL	RAT
003de9 dc49                      	RCALL	CELLS
003dea dc84                      	RCALL	PLUS
003deb daa8                      	RCALL	IAT
003dec dca6                      	RCALL	SUBB
003ded dc5d                      	RCALL	QDUP
003dee da6c                      	RCALL	QBRAN
003def 3df2                      	.DW		SAME2
003df0 db74                      	RCALL	RFROM
003df1 cba2                      	RJMP	DROP
                                 SAME2:
003df2 da55                      	RCALL	DONXT
003df3 3de2                      	.DW		SAME1
003df4 da46                      	RCALL	DOLIT
003df5 0000                      	.DW		0
003df6 9508                      	RET
                                 
                                 ;   find	( a va -- ca na | a F )
                                 ;	Search a vocabulary for a string. Return ca and na if succeeded.
                                 
                                 ;	COLON	4,"find"
                                 FIND:
003df7 dba9                      	RCALL	SWAPP
003df8 dba1                      	RCALL	DUPP
003df9 db64                      	RCALL	CAT
003dfa dbfa                      	RCALL	TEMP
003dfb da87                      	RCALL	STORE
003dfc db9d                      	RCALL	DUPP
003dfd da8f                      	RCALL	AT
003dfe db80                      	RCALL	TOR
003dff 9602                      	ADIW	TOSL,2	;va a+2 --
003e00 dba0                      	RCALL	SWAPP	;a+2 va --
                                 FIND1:
003e01 db98                      	RCALL	DUPP
003e02 da58                      	RCALL	QBRAN
003e03 3e16                      	.DW		FIND6
003e04 db95                      	RCALL	DUPP
003e05 da8e                      	RCALL	IAT
003e06 da34                      	RCALL	DOLIT
003e07 ff3f                      	.DW		$FF3F
003e08 dbb2                      	RCALL	ANDD
003e09 db67                      	RCALL	RAT
003e0a dbc0                      	RCALL	XORR
003e0b da4f                      	RCALL	QBRAN
003e0c 3e11                      	.DW		FIND2
003e0d 9602                      	ADIW	TOSL,2	;a+2 va+2 --
003e0e da2c                      	RCALL	DOLIT
003e0f ffff                      	.DW		-1
003e10 c004                      	RJMP	FIND3
                                 FIND2:
003e11 9602                      	ADIW	TOSL,2	;a+2 va+2 --
003e12 dbe2                      	RCALL	TEMP
003e13 da79                      	RCALL	AT
003e14 dfca                      	RCALL	SAMEQ
                                 FIND3:
003e15 c005                      	RJMP	FIND4
                                 FIND6:
003e16 db4e                      	RCALL	RFROM
003e17 db7c                      	RCALL	DROP
003e18 db88                      	RCALL	SWAPP
003e19 9702                      	SBIW	TOSL,2
003e1a cb86                      	RJMP	SWAPP
                                 FIND4:
003e1b da3f                      	RCALL	QBRAN
003e1c 3e20                      	.DW		FIND5
003e1d 9704                      	SBIW	TOSL,4
003e1e da75                      	RCALL	IAT
003e1f cfe1                      	RJMP	FIND1
                                 FIND5:
003e20 db44                      	RCALL	RFROM
003e21 db72                      	RCALL	DROP
003e22 db7e                      	RCALL	SWAPP
003e23 db70                      	RCALL	DROP
003e24 9702                      	SBIW	TOSL,2
003e25 db74                      	RCALL	DUPP
003e26 dfb2                      	RCALL	NAMET
003e27 cb79                      	RJMP	SWAPP
                                 
                                 ;   NAME?	( a -- ca na | a F )
                                 ;	Search all context vocabularies for a string.
                                 
                                 ;	COLON	5,"NAME?"
                                 NAMEQ:
003e28 dbf5                      	RCALL	CNTXT
003e29 da63                      	RCALL	AT
003e2a cfcc                      	RJMP	FIND
                                 
                                 ;; Terminal response
                                 
                                 ;   ^H	( bot eot cur -- bot eot cur )
                                 ;	Backup the cursor by one character.
                                 
                                 ;	COLON	2,"^H"
                                 BKSP:
003e2b db53                      	RCALL	TOR
003e2c db7e                      	RCALL	OVER
003e2d db37                      	RCALL	RFROM
003e2e db72                      	RCALL	SWAPP
003e2f db7b                      	RCALL	OVER
003e30 db9a                      	RCALL	XORR
003e31 da29                      	RCALL	QBRAN
003e32 3e3c                      	.DW		BACK1
003e33 da07                      	RCALL	DOLIT
003e34 0008                      	.DW		BKSPP
003e35 d9ef                      	RCALL	EMIT
003e36 9701                      	SBIW	TOSL,1
003e37 dc0a                      	RCALL	BLANK
003e38 d9ec                      	RCALL	EMIT
003e39 da01                      	RCALL	DOLIT
003e3a 0008                      	.DW		BKSPP
003e3b d9e9                      	RCALL	EMIT
                                 BACK1:
003e3c 9508                      	RET
                                 
                                 ;   TAP	( bot eot cur c -- bot eot cur )
                                 ;	Accept and echo the key stroke and bump the cursor.
                                 
                                 ;	COLON	3,"TAP"
                                 TAP:
003e3d db5c                      	RCALL	DUPP
003e3e d9e6                      	RCALL	EMIT
003e3f db6b                      	RCALL	OVER
003e40 db13                      	RCALL	CSTOR
003e41 9601                      	adiw	tosl,1
003e42 9508                      	ret
                                 
                                 ;   kTAP	( bot eot cur c -- bot eot cur )
                                 ;	Process a key stroke, CR or backspace.
                                 
                                 ;	COLON	4,"kTAP"
                                 KTAP:
003e43 db56                      	RCALL	DUPP
003e44 970d                      	SBIW	TOSL,CRR
003e45 da15                      	RCALL	QBRAN
003e46 3e4d                      	.DW		KTAP2
003e47 9708                      	SBIW	TOSL,BKSPP
003e48 da12                      	RCALL	QBRAN
003e49 3e4c                      	.DW		KTAP1
003e4a dbf7                      	RCALL	BLANK
003e4b cff1                      	RJMP	TAP
                                 KTAP1:
003e4c cfde                      	RJMP	BKSP
                                 KTAP2:
003e4d db46                      	RCALL	DROP
003e4e db52                      	RCALL	SWAPP
003e4f db44                      	RCALL	DROP
003e50 cb49                      	RJMP	DUPP
                                 
                                 ;   accept	( b u -- b u )
                                 ;	Accept characters to input buffer. Return with actual count.
                                 
                                 ;	COLON	6,"accept"
                                 ACCEP:
003e51 db59                      	RCALL	OVER
003e52 dc1c                      	RCALL	PLUS
003e53 db57                      	RCALL	OVER
                                 ACCP1:
003e54 dc16                      	RCALL	DDUP
003e55 db75                      	RCALL	XORR
003e56 da04                      	RCALL	QBRAN
003e57 3e65                      	.DW		ACCP4
003e58 de67                      	RCALL	KEY
003e59 db40                      	RCALL	DUPP
003e5a dbe7                      	RCALL	BLANK
003e5b dc37                      	RCALL	SUBB
003e5c d9de                      	RCALL	DOLIT
003e5d 005f                      	.DW		$5F
003e5e dc51                      	RCALL	ULESS
003e5f d9fb                      	RCALL	QBRAN
003e60 3e63                      	.DW		ACCP2
003e61 dfdb                      	RCALL	TAP
003e62 c001                      	RJMP	ACCP3
                                 ACCP2:
003e63 dfdf                      	RCALL	KTAP
                                 ACCP3:
003e64 cfef                      	RJMP	ACCP1
                                 ACCP4:
003e65 db2e                      	RCALL	DROP
003e66 db44                      	RCALL	OVER
003e67 cc2b                      	RJMP	SUBB
                                 
                                 ;   EXPECT	( b u -- )
                                 ;	Accept input stream and store count in SPAN.
                                 
003e68 7bac
003e69 4506
003e6a 5058
003e6b 4345
c:\users\rgeorge\Documents\Atmel Studio\7.0\328eForth_ASM\328eForth_ASM\main.asm(147): warning: .cseg .db misalignment - padding zero byte
c:\users\rgeorge\Documents\Atmel Studio\7.0\328eForth_ASM\328eForth_ASM\main.asm(2426): macro 'COLON' called here
003e6c 0054                      	COLON	6,"EXPECT"
                                 EXPEC:
003e6d dfe3                      	RCALL	ACCEP
003e6e db8c                      	RCALL	SPAN
003e6f da13                      	RCALL	STORE
003e70 cb23                      	RJMP	DROP
                                 
                                 ;   QUERY	( -- )
                                 ;	Accept input stream to terminal input buffer.
                                 
003e71 7cd2
003e72 5105
003e73 4555
003e74 5952                      	COLON	5,"QUERY"
                                 QUERY:
003e75 dd44                      	RCALL	TIB
003e76 d9c4                      	RCALL	DOLIT
003e77 0050                      	.DW		80
003e78 dfd8                      	RCALL	ACCEP
003e79 db8c                      	RCALL	NTIB
003e7a da08                      	RCALL	STORE
003e7b db18                      	RCALL	DROP
003e7c d9be                      	RCALL	DOLIT
003e7d 0000                      	.DW		0
003e7e db81                      	RCALL	INN
003e7f ca03                      	RJMP	STORE
                                 
                                 ;; Error handling
                                 
                                 
                                 ;   ERROR	( a -- )
                                 ;	Return address of a null string with zero count.
                                 
                                 ;	COLON	5,"ERROR"
                                 ERROR:
003e80 de47                      	RCALL	SPACE
003e81 dd17                      	RCALL	COUNT
003e82 de5a                      	RCALL	TYPES
003e83 d9b7                      	RCALL	DOLIT
003e84 003f                      	.DW		$3F
003e85 d99f                      	RCALL	EMIT
                                 ABORT:
003e86 de6d                      	RCALL	CR
003e87 dab4                      	RCALL	EMPTY_BUF
003e88 efc0                      	ldi 	yl,low(SPP)
003e89 e0d6                      	ldi 	yh,high(SPP)
003e8a c04e                      	RJMP	QUIT
                                 
                                 ;   abort"	( f -- )
                                 ;	Run time routine of ABORT" . Abort with a message.
                                 
                                 ;	COLON	COMPO+6,"abort"
                                 ;	.DB		'"'
                                 ABORQ:
003e8b d9cf                      	RCALL	QBRAN
003e8c 3e92                      	.DW		ABOR1	;text flag
003e8d de6c                      	RCALL	DOSTR
003e8e dd17                      	RCALL	ICOUNT	;pass error string
003e8f de59                      	RCALL	ITYPES
003e90 dff5                      	RCALL	ABORT
003e91 c047                      	RJMP	QUIT
                                 ABOR1:
003e92 de67                      	RCALL	DOSTR
003e93 cb00                      	RJMP	DROP
                                 
                                 ;; The text interpreter
                                 
                                 ;   $INTERPRET	( a -- )
                                 ;	Interpret a word. If failed, try to convert it to an integer.
                                 
                                 ;	COLON	10,"$INTERPRET"
                                 INTER:
003e94 df93                      	RCALL	NAMEQ
003e95 dbb5                      	RCALL	QDUP	;?defined
003e96 d9c4                      	RCALL	QBRAN
003e97 3ea6                      	.DW		INTE1
003e98 d9fb                      	RCALL	IAT
003e99 d9a1                      	RCALL	DOLIT
003e9a 0040                      	.DW		COMPO
003e9b db1f                      	RCALL	ANDD	;?compile only lexicon bits
003e9c dfee                      	RCALL	ABORQ
003e9d 200d
003e9e 6f63
003e9f 706d
003ea0 6c69
003ea1 2065
003ea2 6e6f
003ea3 796c                      	.DB		13," compile only"
003ea4 d9ce                      	RCALL	EXECU
003ea5 9508                      	RET	;execute defined word
                                 INTE1:
003ea6 ddce                      	RCALL	NUMBQ
003ea7 d9b3                      	RCALL	QBRAN
003ea8 3eaa                      	.DW		INTE2
003ea9 9508                      	RET
                                 INTE2:
003eaa cfd5                      	RJMP	ERROR	;error
                                 
                                 ;   [	( -- )
                                 ;	Start the text interpreter.
                                 
003eab 7ce4
003eac 5b81                      	COLON	IMEDD+1,"["
                                 LBRAC:
003ead d98d                      	RCALL	DOLIT
003eae 7d28                      	.DW		INTER*2
003eaf db62                      	RCALL	TEVAL
003eb0 c9d2                      	RJMP	STORE
                                 
                                 ;   .OK	( -- )
                                 ;	Display "ok" only while interpreting.
                                 
                                 ;	COLON	3,".OK"
                                 DOTOK:
003eb1 d989                      	RCALL	DOLIT
003eb2 7d28                      	.DW		INTER*2
003eb3 db5e                      	RCALL	TEVAL
003eb4 d9d8                      	RCALL	AT
003eb5 dbee                      	RCALL	EQUAL
003eb6 d9a4                      	RCALL	QBRAN
003eb7 3ebb                      	.DW		DOTO1
003eb8 de55                      	RCALL	DOTQP
003eb9 6f02
c:\users\rgeorge\Documents\Atmel Studio\7.0\328eForth_ASM\328eForth_ASM\main.asm(2538): warning: .cseg .db misalignment - padding zero byte
003eba 006b                      	.DB		2,"ok"
003ebb ce38                      DOTO1:	RJMP	CR
                                 
                                 ;   ?STACK	( -- )
                                 ;	Abort if the data stack underflows.
                                 
                                 ;	COLON	6,"?STACK"
                                 QSTAC:
003ebc dcc0                      	RCALL	DEPTH
003ebd daf5                      	RCALL	ZLESS	;check only for underflow
003ebe dfcc                      	RCALL	ABORQ
003ebf 200a
003ec0 6e75
003ec1 6564
003ec2 6672
003ec3 6f6c
c:\users\rgeorge\Documents\Atmel Studio\7.0\328eForth_ASM\328eForth_ASM\main.asm(2549): warning: .cseg .db misalignment - padding zero byte
003ec4 0077                      	.DB		10," underflow"
003ec5 9508                      	RET
                                 
                                 ;   EVAL	( -- )
                                 ;	Interpret the input stream.
                                 
003ec6 7d58
003ec7 4504
003ec8 4156
c:\users\rgeorge\Documents\Atmel Studio\7.0\328eForth_ASM\328eForth_ASM\main.asm(147): warning: .cseg .db misalignment - padding zero byte
c:\users\rgeorge\Documents\Atmel Studio\7.0\328eForth_ASM\328eForth_ASM\main.asm(2555): macro 'COLON' called here
003ec9 004c                      	COLON	4,"EVAL"
                                 EVAL:
003eca dee4                      EVAL1:	RCALL	TOKEN
003ecb dace                      	RCALL	DUPP
003ecc da91                      	RCALL	CAT	;?input stream empty
003ecd d98d                      	RCALL	QBRAN
003ece 3ed3                      	.DW		EVAL2
003ecf db42                      	RCALL	TEVAL
003ed0 dcf2                      	RCALL	ATEXE
                                 ;	RCALL	INTER
003ed1 dfea                      	RCALL	QSTAC	;evaluate input, check stack
003ed2 cff7                      	RJMP	EVAL1
                                 EVAL2:
003ed3 dac0                      	RCALL	DROP
003ed4 cfdc                      	RJMP	DOTOK
                                 
                                 ;; Shell
                                 
                                 ;   QUIT	( -- )
                                 ;	Reset return stack pointer and start text interpreter.
                                 
003ed5 7d8e
003ed6 5104
003ed7 4955
c:\users\rgeorge\Documents\Atmel Studio\7.0\328eForth_ASM\328eForth_ASM\main.asm(147): warning: .cseg .db misalignment - padding zero byte
c:\users\rgeorge\Documents\Atmel Studio\7.0\328eForth_ASM\328eForth_ASM\main.asm(2576): macro 'COLON' called here
003ed8 0054                      	COLON	4,"QUIT"
                                 QUIT:
003ed9 efa0                      	ldi 	xl,low(RPP)
003eda bfad                      	out_ 	SPL,xl
003edb e0b7                      	ldi 	xh,high(RPP)
003edc bfbe                      	out_ 	SPH,xh
003edd d95d                      	RCALL	DOLIT
003ede 0700                      	.DW		TIBB
003edf db2c                      	RCALL	TTIB
003ee0 d9a2                      	RCALL	STORE
                                 QUIT1:
003ee1 dfcb                      	RCALL	LBRAC	;start interpretation
                                 QUIT2:
003ee2 df92                      	RCALL	QUERY	;get input
003ee3 dfe6                      	RCALL	EVAL
003ee4 cffd                      	RJMP	QUIT2	;continue till error
                                 
                                 ;; The compiler
                                 
                                 ;   '	( -- ca )
                                 ;	Search context vocabularies for the next word in input stream.
                                 
003ee5 7dac
003ee6 2701                      	COLON	1,"'"
                                 TICK:
003ee7 dec7                      	RCALL	TOKEN
003ee8 df3f                      	RCALL	NAMEQ	;?defined
003ee9 d971                      	RCALL	QBRAN
003eea 3eec                      	.DW		TICK1
003eeb 9508                      	RET				;yes, push code address
                                 TICK1:
003eec cf93                      	RJMP	ERROR	;no, error
                                 
                                 ;; Tools
                                 
                                 ;   DUMP	( a u -- )
                                 ;	Dump 128 bytes from ain RAM, in a formatted manner.
                                 
003eed 7dcc
003eee 4404
003eef 4d55
c:\users\rgeorge\Documents\Atmel Studio\7.0\328eForth_ASM\328eForth_ASM\main.asm(147): warning: .cseg .db misalignment - padding zero byte
c:\users\rgeorge\Documents\Atmel Studio\7.0\328eForth_ASM\328eForth_ASM\main.asm(2613): macro 'COLON' called here
003ef0 0050                      	COLON	4,"DUMP"
                                 DUMP:
003ef1 d949                      	RCALL	DOLIT
003ef2 0007                      	.DW		7
003ef3 da8b                      	RCALL	TOR		;start count down loop
003ef4 ddff                      DUMP1:	RCALL	CR
003ef5 daa4                      	RCALL	DUPP
003ef6 d944                      	RCALL	DOLIT
003ef7 0005                      	.DW		5
003ef8 de25                      	RCALL	UDOTR
003ef9 ddce                      	RCALL	SPACE
003efa d940                      	RCALL	DOLIT
003efb 000f                      	.DW		15
003efc da82                      	RCALL	TOR
                                 DUMP2:
003efd dc9b                      	RCALL	COUNT
003efe d93c                      	RCALL	DOLIT
003eff 0003                      	.DW		3
003f00 de1d                      	RCALL	UDOTR
003f01 d946                      	RCALL	DONXT	;display printable characters
003f02 3efd                      	.DW		DUMP2
003f03 ddc4                      	RCALL	SPACE
003f04 da95                      	RCALL	DUPP
003f05 d935                      	RCALL	DOLIT
003f06 0010                      	.DW		16
003f07 db8b                      	RCALL	SUBB
003f08 d932                      	RCALL	DOLIT
003f09 0010                      	.DW		16
003f0a ddd2                      	RCALL	TYPES
003f0b d93c                      	RCALL	DONXT
003f0c 3ef4                      	.DW		DUMP1	;loop till done
003f0d ca86                      	RJMP	DROP
                                 
                                 ;   IDUMP	( a -- )
                                 ;	Dump 128 bytes from a in flash, in a formatted manner.
                                 
003f0e 7ddc
003f0f 4905
003f10 5544
003f11 504d                      	COLON	5,"IDUMP"
                                 IDUMP:
003f12 d928                      	RCALL	DOLIT
003f13 0007                      	.DW		7
003f14 da6a                      	RCALL	TOR	;start count down loop
                                 IDUMP1:
003f15 ddde                      	RCALL	CR
003f16 da83                      	RCALL	DUPP
003f17 d923                      	RCALL	DOLIT
003f18 0005                      	.DW		5
003f19 de04                      	RCALL	UDOTR
003f1a ddad                      	RCALL	SPACE
003f1b d91f                      	RCALL	DOLIT
003f1c 000f                      	.DW		15
003f1d da61                      	RCALL	TOR
                                 IDUMP2:
003f1e dc87                      	RCALL	ICOUNT
003f1f d91b                      	RCALL	DOLIT
003f20 0003                      	.DW		3
003f21 ddfc                      	RCALL	UDOTR
003f22 d925                      	RCALL	DONXT	;display printable characters
003f23 3f1e                      	.DW		IDUMP2
003f24 dda3                      	RCALL	SPACE
003f25 da74                      	RCALL	DUPP
003f26 d914                      	RCALL	DOLIT
003f27 0010                      	.DW		16
003f28 db6a                      	RCALL	SUBB
003f29 d911                      	RCALL	DOLIT
003f2a 0010                      	.DW		16
003f2b ddbd                      	RCALL	ITYPES
003f2c d91b                      	RCALL	DONXT
003f2d 3f15                      	.DW		IDUMP1	;loop till done
003f2e ca65                      	RJMP	DROP
                                 
                                 
                                 ;   .S	( ... -- ... )
                                 ;	Display the contents of the data stack.
                                 
003f2f 7e1e
003f30 2e02
c:\users\rgeorge\Documents\Atmel Studio\7.0\328eForth_ASM\328eForth_ASM\main.asm(147): warning: .cseg .db misalignment - padding zero byte
c:\users\rgeorge\Documents\Atmel Studio\7.0\328eForth_ASM\328eForth_ASM\main.asm(2687): macro 'COLON' called here
003f31 0053                      	COLON	2,".S"
                                 DOTS:
003f32 dc4a                      	RCALL	DEPTH	;stack depth
003f33 da4b                      	RCALL	TOR	;start count down loop
003f34 c003                      	RJMP	DOTS2	;skip first pass
                                 DOTS1:
003f35 da3b                      	RCALL	RAT
003f36 dc50                      	RCALL	PICK
003f37 ddf9                      	RCALL	DOT	;index stack, display contents
                                 DOTS2:
003f38 d90f                      	RCALL	DONXT 
003f39 3f35                      	.DW		DOTS1	;loop till done
003f3a ddd3                      	RCALL	DOTQP
003f3b 2004
003f3c 733c
c:\users\rgeorge\Documents\Atmel Studio\7.0\328eForth_ASM\328eForth_ASM\main.asm(2700): warning: .cseg .db misalignment - padding zero byte
003f3d 0070                      	.DB		4," <sp"
003f3e 9508                      	RET
                                 
                                 ;   >NAME	( ca -- na | F )
                                 ;	Convert code address to a name address.
                                 
                                 ;	COLON	5,">NAME"
                                 TNAME:
003f3f da3f                      	RCALL	TOR
003f40 dadd                      	RCALL	CNTXT
003f41 d94b                      	RCALL	AT	;na
                                 TNAM1:	
003f42 da57                      	RCALL	DUPP	;na na
003f43 d917                      	RCALL	QBRAN
003f44 3f4f                      	.DW		TNAM2
003f45 da54                      	RCALL	DUPP	;na na
003f46 de92                      	RCALL	NAMET	;na ca
003f47 da29                      	RCALL	RAT	;na ca ca
003f48 da82                      	RCALL	XORR	;na f
003f49 d911                      	RCALL	QBRAN
003f4a 3f4f                      	.DW		TNAM2
003f4b 9702                      	SBIW	TOSL,2	;la
003f4c d947                      	RCALL	IAT	;na'
003f4d d917                      	RCALL	BRAN
003f4e 3f42                      	.DW		TNAM1
                                 TNAM2:
003f4f da15                      	RCALL	RFROM	;na or 0
003f50 ca43                      	RJMP	DROP
                                 
                                 ;   .ID	( na -- )
                                 ;	Display the name at address.
                                 
                                 ;	COLON	3,".ID"
                                 DOTID:
003f51 dc54                      	RCALL	ICOUNT
003f52 d8e8                      	RCALL	DOLIT
003f53 001f                      	.DW		31
003f54 da66                      	RCALL	ANDD
003f55 cd93                      	RJMP 	ITYPES
                                 
                                 ;   WORDS	( -- )
                                 ;	Display the names in the context vocabulary.
                                 
003f56 7e60
003f57 5705
003f58 524f
003f59 5344                      	COLON	5,"WORDS"
                                 WORDS:
003f5a dd99                      	RCALL	CR
003f5b dac2                      	RCALL	CNTXT
003f5c d930                      	RCALL	AT	;na
                                 WORS1:	
003f5d daed                      	RCALL	QDUP	;end of list?
003f5e d8fc                      	RCALL	QBRAN
003f5f 3f67                      	.DW		WORS2
003f60 da39                      	RCALL	DUPP	;na na
003f61 dd66                      	RCALL	SPACE
003f62 dfee                      	RCALL	DOTID	;display a name
003f63 9702                      	SBIW	TOSL,2	;la
003f64 d92f                      	RCALL	IAT	;na'
003f65 d8ff                      	RCALL	BRAN
003f66 3f5d                      	.DW		WORS1
                                 WORS2:
003f67 9508                      	RET
                                 
                                 
                                 ;; Hardware reset
                                 
                                 ;   hi	( -- )
                                 ;	Display the sign-on message of eForth.
                                 
                                 ;	COLON	2,"hi"
                                 HI:
                                 ;	RCALL	STOIO
003f68 dd8b                      	RCALL	CR
003f69 dda4                      	RCALL	DOTQP 	;initialize I/O
003f6a 330f
003f6b 3832
003f6c 4665
003f6d 726f
003f6e 6874
003f6f 7620
003f70 2e32
003f71 3032                      	.DB		15,"328eForth v2.20"	;model
003f72 cd81                      	RJMP	CR
                                 
                                 ;   COLD	( -- )
                                 ;	The hilevel cold start sequence.
                                 
003f73 7eae
003f74 4304
003f75 4c4f
c:\users\rgeorge\Documents\Atmel Studio\7.0\328eForth_ASM\328eForth_ASM\main.asm(147): warning: .cseg .db misalignment - padding zero byte
c:\users\rgeorge\Documents\Atmel Studio\7.0\328eForth_ASM\328eForth_ASM\main.asm(2779): macro 'COLON' called here
003f76 0044                      	COLON	4,"COLD"
                                 COLD:
                                 COLD1:
003f77 d8b6                      	RCALL	STOIO	
003f78 d8c2                      	RCALL	DOLIT
003f79 0100                      	.DW		$100
003f7a da1f                      	RCALL	DUPP
003f7b d035                      	RCALL	READ	;initialize user area
003f7c d8be                      	RCALL	DOLIT	;init older buffer
003f7d 011e                      	.DW		OLDER
003f7e d90e                      	RCALL	AT		;
003f7f d981                      	RCALL	READ_FLASH
003f80 d999                      	RCALL	SWITCH
003f81 d8b9                      	RCALL	DOLIT	;init newer buffer
003f82 011e                      	.DW		OLDER
003f83 d909                      	RCALL	AT		;
003f84 d97c                      	RCALL	READ_FLASH
003f85 d994                      	RCALL	SWITCH
003f86 dadb                      	RCALL	DDROP
003f87 da62                      	RCALL	TBOOT
003f88 dc3a                      	RCALL	ATEXE
003f89 cf4f                      	RJMP	QUIT	;start interpretation
                                 
                                 .equ 	PAGESIZEB = PAGESIZE*2 ;PAGESIZEB is page size in BYTES, not words
                                 .def	spmcrval = r20
                                 .def	looplo = r22
                                 .def	loophi = r23
                                 
                                 ; Page Erase
                                 ;	ERASE ( a -- )
                                 ;	Erase a page of flash memory
                                 
003f8a 7ee8
003f8b 4505
003f8c 4152
003f8d 4553                      	COLON	5,"ERASE"
                                 ERASE:
003f8e 01fc                      	movw	zl,tosl
003f8f 9189
003f90 9199                      	loadtos
                                 ERASE_1:
003f91 e043                      	ldi 	spmcrval, (1<<PGERS) | (1<<SELFPRGEN)
003f92 d02a                      	rcall 	Do_spm
                                 ; re-enable the RWW section
003f93 e141                      	ldi 	spmcrval, (1<<RWWSRE) | (1<<SELFPRGEN)
003f94 c028                      	rjmp 	Do_spm
                                 
                                 ; Page Write
                                 ; 	WRITE ( ram flash -- )	
                                 ; 	transfer data from RAM to Flash page buffer
                                 
003f95 7f16
003f96 5705
003f97 4952
003f98 4554                      	COLON	5,"WRITE"
                                 WRITE:
003f99 01fc                      	movw	zl, tosl
003f9a 9189
003f9b 9199                      	loadtos
003f9c 01dc                      	movw	xl, tosl
003f9d 9189
003f9e 9199                      	loadtos
                                 WRITE_1:
003f9f e860                      	ldi 	looplo, low(PAGESIZEB) ;init loop variable
                                 Wrloop:
003fa0 900d                      	ld 		r0, X+
003fa1 901d                      	ld 		r1, X+
003fa2 e041                      	ldi 	spmcrval, (1<<SELFPRGEN)
003fa3 d019                      	rcall 	Do_spm
003fa4 9632                      	adiw 	ZL, 2
003fa5 5062                      	subi 	looplo, 2 ;use subi for PAGESIZEB<=256
003fa6 f7c9                      	brne 	Wrloop
                                 ; execute Page Write
003fa7 58e0                      	subi 	ZL, low(PAGESIZEB) ;restore pointer
003fa8 40f0                      	sbci 	ZH, high(PAGESIZEB) ;not required for PAGESIZEB<=256
003fa9 e045                      	ldi 	spmcrval, (1<<PGWRT) | (1<<SELFPRGEN)
003faa d012                      	rcall 	Do_spm
                                 ; re-enable the RWW section
003fab e141                      	ldi 	spmcrval, (1<<RWWSRE) | (1<<SELFPRGEN)
003fac c010                      	rjmp 	Do_spm
                                 
                                 ; Page Read
                                 ; 	READ ( flash ram -- )	
                                 ; 	transfer data from Flash to RAM page buffer
                                 
003fad 7f2c
003fae 5204
003faf 4145
c:\users\rgeorge\Documents\Atmel Studio\7.0\328eForth_ASM\328eForth_ASM\main.asm(147): warning: .cseg .db misalignment - padding zero byte
c:\users\rgeorge\Documents\Atmel Studio\7.0\328eForth_ASM\328eForth_ASM\main.asm(2855): macro 'COLON' called here
003fb0 0044                      	COLON	4,"READ"
                                 READ:
003fb1 01dc                      	movw	xl,tosl
003fb2 9189
003fb3 9199                      	loadtos
003fb4 01fc                      	movw	zl,tosl
003fb5 9189
003fb6 9199                      	loadtos
                                 READ_1:	
                                 ; read back and check, optional
003fb7 e860                      	ldi 	looplo, low(PAGESIZEB) ;init loop variable
                                 Rdloop:
003fb8 9005                      	lpm 	r0, Z+
003fb9 920d                      	st 		X+, r0
003fba 5061                      	subi 	looplo, 1 ;use subi for PAGESIZEB<=256
003fbb f7e1                      	brne 	Rdloop
003fbc 9508                      	ret
                                 
                                 Do_spm:
                                 ; check for previous SPM complete
                                 Wait_spm:
003fbd b717                      	in 		temp1, SPMCSR
003fbe fd10                      	sbrc 	temp1, SELFPRGEN
003fbf cffd                      	rjmp 	Wait_spm
                                 ; SPM timed sequence
003fc0 bf47                      	out 	SPMCSR, spmcrval
003fc1 95e8                      	spm
003fc2 9508                      	ret
                                 
                                 ;===============================================================
                                 ; Compiler
                                 
                                 .org	$100
                                 
                                 ;   1+	( a -- a )
                                 ;	Add 1 to address.
                                 
000100 7f5c
000101 3102
c:\users\rgeorge\Documents\Atmel Studio\7.0\328eForth_ASM\328eForth_ASM\main.asm(147): warning: .cseg .db misalignment - padding zero byte
c:\users\rgeorge\Documents\Atmel Studio\7.0\328eForth_ASM\328eForth_ASM\main.asm(2890): macro 'COLON' called here
000102 002b                      	COLON	2,"1+"
                                 ONEP:
000103 9601                      	adiw	tosl,1
000104 9508                      	ret
                                 
                                 ;   1-	( a -- a )
                                 ;	Subtract 1 from address.
                                 
000105 0202
000106 3102
c:\users\rgeorge\Documents\Atmel Studio\7.0\328eForth_ASM\328eForth_ASM\main.asm(147): warning: .cseg .db misalignment - padding zero byte
c:\users\rgeorge\Documents\Atmel Studio\7.0\328eForth_ASM\328eForth_ASM\main.asm(2898): macro 'COLON' called here
000107 002d                      	COLON	2,"1-"
                                 ONEM:
000108 9701                      	sbiw	tosl,1
000109 9508                      	ret
                                 
                                 
                                 ;   2+	( a -- a )
                                 ;	Add cell size in byte to address.
                                 
00010a 020c
00010b 3202
c:\users\rgeorge\Documents\Atmel Studio\7.0\328eForth_ASM\328eForth_ASM\main.asm(147): warning: .cseg .db misalignment - padding zero byte
c:\users\rgeorge\Documents\Atmel Studio\7.0\328eForth_ASM\328eForth_ASM\main.asm(2907): macro 'COLON' called here
00010c 002b                      	COLON	2,"2+"
                                 CELLP:
00010d 9602                      	adiw	tosl,2
00010e 9508                      	ret
                                 
                                 
                                 ;   2-	( a -- a )
                                 ;	Subtract cell size in byte from address.
                                 
00010f 0216
000110 3202
c:\users\rgeorge\Documents\Atmel Studio\7.0\328eForth_ASM\328eForth_ASM\main.asm(147): warning: .cseg .db misalignment - padding zero byte
c:\users\rgeorge\Documents\Atmel Studio\7.0\328eForth_ASM\328eForth_ASM\main.asm(2916): macro 'COLON' called here
000111 002d                      	COLON	2,"2-"
                                 CELLM:
000112 9702                      	sbiw	tosl,2
000113 9508                      	ret
                                 
                                 ; 	>	( n1 n2 -- flag ) Compare
                                 ; 	compares two values (signed)
                                 
000114 0220
000115 3e01                      	COLON	1,">"
                                 GREATER:
000116 9129                      	ld 		temp2, Y+
000117 9139                      	ld 		temp3, Y+
000118 1728                      	cp 		temp2, tosl
000119 0739                      	cpc 	temp3, tosh
00011a c00d                      	rjmp 	DGRE1
                                 
                                 ; 	D>	( d1 d2 -- flag ) Compare
                                 ; 	compares two d values (signed)
                                 
00011b 022a
00011c 4402
c:\users\rgeorge\Documents\Atmel Studio\7.0\328eForth_ASM\328eForth_ASM\main.asm(147): warning: .cseg .db misalignment - padding zero byte
c:\users\rgeorge\Documents\Atmel Studio\7.0\328eForth_ASM\328eForth_ASM\main.asm(2935): macro 'COLON' called here
00011d 003e                      	COLON	2,"D>"
                                 DGRE:	
00011e 9109                      	ld 		temp0, Y+
00011f 9119                      	ld 		temp1, Y+
000120 9129                      	ld 		temp2, Y+
000121 9139                      	ld 		temp3, Y+
000122 90e9                      	ld 		temp4, Y+
000123 90f9                      	ld 		temp5, Y+
000124 16e0                      	cp 		temp4, temp0
000125 06f1                      	cpc 	temp5, temp1
000126 0728                      	cpc 	temp2, tosl
000127 0739                      	cpc 	temp3, tosh
                                 DGRE1:
000128 01c1                      	movw 	tosl,zerol
000129 f01c                      	brlt 	DGRE2
00012a f011                      	brbs 	1, DGRE2
00012b 9701                      	sbiw 	tosl,1
00012c 9508                      	ret
                                 DGRE2:
00012d 9508                      	ret
                                 
                                 ; 	D+	( d1 d2 -- d3) Arithmetics
                                 ; 	add double cell values
                                 
00012e 0238
00012f 4402
c:\users\rgeorge\Documents\Atmel Studio\7.0\328eForth_ASM\328eForth_ASM\main.asm(147): warning: .cseg .db misalignment - padding zero byte
c:\users\rgeorge\Documents\Atmel Studio\7.0\328eForth_ASM\328eForth_ASM\main.asm(2959): macro 'COLON' called here
000130 002b                      	COLON	2,"D+"
                                 DPLUS:
000131 9129                      	ld 		temp2, Y+
000132 9139                      	ld 		temp3, Y+
000133 90e9                      	ld 		temp4, Y+
000134 90f9                      	ld 		temp5, Y+
000135 9149                      	ld 		temp6, Y+
000136 9159                      	ld 		temp7, Y+
000137 0f24                      	add 	temp2, temp6
000138 1f35                      	adc 	temp3, temp7
000139 1d8e                      	adc 	tosl, temp4
00013a 1d9f                      	adc 	tosh, temp5
00013b 933a                      	st 		-Y, temp3
00013c 932a                      	st 		-Y, temp2
00013d 9508                      	ret
                                 
                                 ; 	D-	( d1 d2 -- d3 ) Arithmetics
                                 ; 	subtract double cell values
                                 
00013e 025e
00013f 4402
c:\users\rgeorge\Documents\Atmel Studio\7.0\328eForth_ASM\328eForth_ASM\main.asm(147): warning: .cseg .db misalignment - padding zero byte
c:\users\rgeorge\Documents\Atmel Studio\7.0\328eForth_ASM\328eForth_ASM\main.asm(2978): macro 'COLON' called here
000140 002d                      	COLON	2,"D-"
                                 DMINUS:
000141 9129                      	ld 		temp2, Y+
000142 9139                      	ld 		temp3, Y+
000143 90e9                      	ld 		temp4, Y+
000144 90f9                      	ld 		temp5, Y+
000145 9149                      	ld 		temp6, Y+
000146 9159                      	ld 		temp7, Y+
000147 1b42                      	sub 	temp6, temp2
000148 0b53                      	sbc 	temp7, temp3
000149 0ae8                      	sbc 	temp4, tosl
00014a 0af9                      	sbc 	temp5, tosh
00014b 935a                      	st 		-Y, temp7
00014c 934a                      	st 		-Y, temp6
00014d 01c7                      	movw 	tosl, temp4
00014e 9508                      	ret
                                 
                                 ;	ALLOT	( n -- )
                                 ;	Allocate n bytes to the code dictionary.
                                 
00014f 027e
000150 4105
000151 4c4c
000152 544f                      	COLON	5,"ALLOT"
                                 ALLOT:
000153 940e 3a28                 	CALL	DPP
000155 940c 3b8f                 	JMP		PSTOR
                                 
                                 ;   IALLOT	( n -- )
                                 ;	Allocate n bytes to the code dictionary.
                                 
000157 02a0
000158 4906
000159 4c41
00015a 4f4c
c:\users\rgeorge\Documents\Atmel Studio\7.0\328eForth_ASM\328eForth_ASM\main.asm(147): warning: .cseg .db misalignment - padding zero byte
c:\users\rgeorge\Documents\Atmel Studio\7.0\328eForth_ASM\328eForth_ASM\main.asm(3006): macro 'COLON' called here
00015b 0054                      	COLON	6,"IALLOT"
                                 IALLOT:
00015c 940e 3a23                 	CALL	CPP
00015e 940c 3b8f                 	JMP		PSTOR
                                 
                                 ;   ,	( w -- )
                                 ;	Compile an integer into the code dictionary.
                                 
000160 02b0
000161 2c01                      	COLON	1,","
                                 COMMA:
000162 940e 3a23                 	CALL	CPP
000164 940e 388d                 	CALL	AT
000166 940e 399a                 	CALL	DUPP
000168 940e 010d                 	CALL	CELLP	;cell boundary
00016a 940e 3a23                 	CALL	CPP
00016c 940e 3883                 	CALL	STORE
00016e 940c 38dd                 	JMP		ISTOR
                                 
                                 ;   call,	( ca -- )
                                 ;	Assemble a call instruction to ca.
                                 
                                 ;	COLON	5,"call,"
                                 CALLC:
000170 940e 383b                 	CALL	DOLIT
000172 940e                      	.DW		CALLL
000173 940e 0162                 	CALL	COMMA
000175 cfec                      	RJMP	COMMA	;328 long call
                                 
                                 ;   [COMPILE]	( -- ; <string> )
                                 ;	Compile the next immediate word into code dictionary.
                                 
000176 02c2
000177 5b89
000178 4f43
000179 504d
00017a 4c49
00017b 5d45                      	COLON	IMEDD+9,"[COMPILE]"
                                 BCOMP:
00017c 940e 3ee7                 	CALL	TICK
00017e 940e 3a39                 	CALL	TWOSL
000180 cfef                      	RJMP	CALLC
                                 
                                 ;   COMPILE	( -- )
                                 ;	Compile the next address in colon list to code dictionary.
                                 
000181 02ee
000182 4347
000183 4d4f
000184 4950
000185 454c                      	COLON	COMPO+7,"COMPILE"
                                 COMPI:
000186 940e 3965                 	CALL	RFROM
000188 940e 3a33                 	CALL	CELLS
00018a 940e 399a                 	CALL	DUPP
00018c 940e 388d                 	CALL	AT
00018e 940e 0162                 	CALL	COMMA	;compile call instruction
000190 940e 010d                 	CALL	CELLP
000192 940e 399a                 	CALL	DUPP
000194 940e 388d                 	CALL	AT
000196 940e 0162                 	CALL	COMMA	;compile address
000198 940e 010d                 	CALL	CELLP
00019a 940e 3a39                 	CALL	TWOSL
00019c 940e 397f                 	CALL	TOR
00019e 9508                      	RET				;adjust return address
                                 
                                 ;   LITERAL	( w -- )
                                 ;	Compile tos to code dictionary as an integer literal.
                                 
00019f 0304
0001a0 4c07
0001a1 5449
0001a2 5245
0001a3 4c41                      	COLON	7,"LITERAL"
                                 LITER:
0001a4 940e 383b                 	CALL	DOLIT
0001a6 383b                      	.DW		DOLIT
0001a7 940e 0170                 	CALL	CALLC
0001a9 cfb8                      	RJMP	COMMA
                                 
                                 ;   $,"	( -- )
                                 ;	Compile a literal string up to next " .
                                 
                                 ;	COLON	3,'$'
                                 ;	.DB		',','"'
                                 STRCQ:
0001aa 940e 383b                 	CALL	DOLIT
0001ac 0022                      	.DW		'"'
0001ad 940e 3dc6                 	CALL	WORDD	;move string to code dictionary
0001af 940e 399a                 	CALL	DUPP
0001b1 940e 395e                 	CALL	CAT
0001b3 940e 3a39                 	CALL	TWOSL
0001b5 940e 397f                 	CALL	TOR
                                 STRCQ1:
0001b7 940e 399a                 	CALL	DUPP
0001b9 940e 388d                 	CALL	AT
0001bb 940e 0162                 	CALL	COMMA
0001bd 940e 010d                 	CALL	CELLP
0001bf 940e 3848                 	CALL	DONXT
0001c1 01b7                      	.DW		STRCQ1
0001c2 940c 3994                 	JMP		DROP
                                 
                                 ;; Structures
                                 
                                 ;   BEGIN	( -- a )
                                 ;	Start an infinite or indefinite loop structure.
                                 
0001c4 0340
0001c5 4285
0001c6 4745
0001c7 4e49                      	COLON	IMEDD+5,"BEGIN"
                                 BEGIN:
0001c8 940e 3a23                 	CALL	CPP
0001ca 940c 388d                 	JMP		AT
                                 
                                 ;   FOR	( -- a )
                                 ;	Start a FOR-NEXT loop structure in a colon definition.
                                 
0001cc 038a
0001cd 4683
0001ce 524f                      	COLON	IMEDD+3,"FOR"
                                 FOR:
0001cf 940e 383b                 	CALL	DOLIT
0001d1 397f                      	.DW		TOR
0001d2 940e 0170                 	CALL	CALLC
0001d4 cff3                      	RJMP	BEGIN
                                 
                                 ;   NEXT	( a -- )
                                 ;	Terminate a FOR-NEXT loop structure.
                                 
0001d5 039a
0001d6 4e84
0001d7 5845
c:\users\rgeorge\Documents\Atmel Studio\7.0\328eForth_ASM\328eForth_ASM\main.asm(147): warning: .cseg .db misalignment - padding zero byte
c:\users\rgeorge\Documents\Atmel Studio\7.0\328eForth_ASM\328eForth_ASM\main.asm(3117): macro 'COLON' called here
0001d8 0054                      	COLON	IMEDD+4,"NEXT"
                                 NEXT:
0001d9 940e 383b                 	CALL	DOLIT
0001db 3848                      	.DW		DONXT
0001dc 940e 0170                 	CALL	CALLC
0001de 940e 3a39                 	CALL	TWOSL
0001e0 cf81                      	RJMP	COMMA
                                 
                                 ;   UNTIL	( a -- )
                                 ;	Terminate a BEGIN-UNTIL indefinite loop structure.
                                 
0001e1 03ac
0001e2 5585
0001e3 544e
0001e4 4c49                      	COLON	IMEDD+5,"UNTIL"
                                 UNTIL:
0001e5 940e 383b                 	CALL	DOLIT
0001e7 385b                      	.DW		QBRAN
0001e8 940e 0170                 	CALL	CALLC
0001ea 940e 3a39                 	CALL	TWOSL
0001ec cf75                      	RJMP	COMMA
                                 
                                 ;   AGAIN	( a -- )
                                 ;	Terminate a BEGIN-AGAIN infinite loop structure.
                                 
0001ed 03c4
0001ee 4185
0001ef 4147
0001f0 4e49                      	COLON	IMEDD+5,"AGAIN"
                                 AGAIN:
0001f1 940e 383b                 	CALL	DOLIT
0001f3 3865                      	.DW		BRAN
0001f4 940e 0170                 	CALL	CALLC
0001f6 940e 3a39                 	CALL	TWOSL
0001f8 cf69                      	RJMP	COMMA
                                 
                                 ;   IF	( -- A )
                                 ;	Begin a conditional branch structure.
                                 
0001f9 03dc
0001fa 4982
c:\users\rgeorge\Documents\Atmel Studio\7.0\328eForth_ASM\328eForth_ASM\main.asm(147): warning: .cseg .db misalignment - padding zero byte
c:\users\rgeorge\Documents\Atmel Studio\7.0\328eForth_ASM\328eForth_ASM\main.asm(3150): macro 'COLON' called here
0001fb 0046                      	COLON	IMEDD+2,"IF"
                                 IFF:
0001fc 940e 383b                 	CALL	DOLIT
0001fe 385b                      	.DW		QBRAN
0001ff 940e 0170                 	CALL	CALLC
000201 940e 01c8                 	CALL	BEGIN
000203 940e 383b                 	CALL	DOLIT
000205 0002                      	.DW		2
000206 cf55                      	RJMP	IALLOT
                                 
                                 ;   AHEAD	( -- A )
                                 ;	Compile a forward branch instruction.
                                 
                                 ;	COLON	IMEDD+5,"AHEAD"
                                 AHEAD:
000207 940e 383b                 	CALL	DOLIT
000209 3865                      	.DW		BRAN
00020a 940e 0170                 	CALL	CALLC
00020c 940e 01c8                 	CALL	BEGIN
00020e 940e 383b                 	CALL	DOLIT
000210 0002                      	.DW		2
000211 940c 015c                 	JMP		IALLOT
                                 
                                 ;   REPEAT	( A a -- )
                                 ;	Terminate a BEGIN-WHILE-REPEAT indefinite loop.
                                 
000213 03f4
000214 5286
000215 5045
000216 4145
c:\users\rgeorge\Documents\Atmel Studio\7.0\328eForth_ASM\328eForth_ASM\main.asm(147): warning: .cseg .db misalignment - padding zero byte
c:\users\rgeorge\Documents\Atmel Studio\7.0\328eForth_ASM\328eForth_ASM\main.asm(3176): macro 'COLON' called here
000217 0054                      	COLON	IMEDD+6,"REPEAT"
                                 REPEA:
000218 940e 01f1                 	CALL	AGAIN
00021a 940e 01c8                 	CALL	BEGIN
00021c 940e 3a39                 	CALL	TWOSL
00021e 940e 39a1                 	CALL	SWAPP
000220 940c 38dd                 	JMP		ISTOR
                                 
                                 ;   THEN	( A -- )
                                 ;	Terminate a conditional branch structure.
                                 
000222 0428
000223 5484
000224 4548
c:\users\rgeorge\Documents\Atmel Studio\7.0\328eForth_ASM\328eForth_ASM\main.asm(147): warning: .cseg .db misalignment - padding zero byte
c:\users\rgeorge\Documents\Atmel Studio\7.0\328eForth_ASM\328eForth_ASM\main.asm(3187): macro 'COLON' called here
000225 004e                      	COLON	IMEDD+4,"THEN"
                                 THENN:
000226 940e 01c8                 	CALL	BEGIN
000228 940e 3a39                 	CALL	TWOSL
00022a 940e 39a1                 	CALL	SWAPP
00022c 940c 38dd                 	JMP		ISTOR
                                 
                                 ;   AFT	( a -- a A )
                                 ;	Jump to THEN in a FOR-AFT-THEN-NEXT loop the first time through.
                                 
00022e 0446
00022f 4183
000230 5446                      	COLON	IMEDD+3,"AFT"
                                 AFT:
000231 940e 3994                 	CALL	DROP
000233 940e 0207                 	CALL	AHEAD
000235 940e 01c8                 	CALL	BEGIN
000237 940c 39a1                 	JMP		SWAPP
                                 
                                 ;   ELSE	( A -- A )
                                 ;	Start the false clause in an IF-ELSE-THEN structure.
                                 
000239 045e
00023a 4584
00023b 534c
c:\users\rgeorge\Documents\Atmel Studio\7.0\328eForth_ASM\328eForth_ASM\main.asm(147): warning: .cseg .db misalignment - padding zero byte
c:\users\rgeorge\Documents\Atmel Studio\7.0\328eForth_ASM\328eForth_ASM\main.asm(3207): macro 'COLON' called here
00023c 0045                      	COLON	IMEDD+4,"ELSE"
                                 ELSEE:
00023d 940e 0207                 	CALL	AHEAD
00023f 940e 39a1                 	CALL	SWAPP
000241 940c 0226                 	JMP		THENN
                                 
                                 ;   WHILE	( a -- A a )
                                 ;	Conditional branch out of a BEGIN-WHILE-REPEAT loop.
                                 
000243 0474
000244 5785
000245 4948
000246 454c                      	COLON	IMEDD+5,"WHILE"
                                 WHILE:
000247 940e 01fc                 	CALL	IFF
000249 940c 39a1                 	JMP		SWAPP
                                 
                                 ;   ABORT"	( -- ; <string> )
                                 ;	Conditional abort with an error message.
                                 
00024b 0488
00024c 4186
00024d 4f42
00024e 5452                      	COLON	IMEDD+6,"ABORT"
c:\users\rgeorge\Documents\Atmel Studio\7.0\328eForth_ASM\328eForth_ASM\main.asm(3225): warning: .cseg .db misalignment - padding zero byte
00024f 0022                      	.DB		'"'
                                 ABRTQ:
000250 940e 383b                 	CALL	DOLIT
000252 3e8b                      	.DW		ABORQ
000253 940e 0170                 	CALL	CALLC
000255 940e 01aa                 	CALL	STRCQ
000257 9508                      	RET
                                 
                                 ;   $"	( -- ; <string> )
                                 ;	Compile an inline string literal.
                                 
000258 0498
000259 2482                      	COLON	IMEDD+2,'$'
c:\users\rgeorge\Documents\Atmel Studio\7.0\328eForth_ASM\328eForth_ASM\main.asm(3237): warning: .cseg .db misalignment - padding zero byte
00025a 0022                      	.DB		'"'
                                 STRQ:
00025b 940e 383b                 	CALL	DOLIT
00025d 3d0c                      	.DW		STRQP
00025e 940e 0170                 	CALL	CALLC
000260 940e 01aa                 	CALL	STRCQ
000262 9508                      	RET
                                 
                                 ;   ."	( -- ; <string> )
                                 ;	Compile an inline string literal to be typed out at run time.
                                 
000263 04b2
000264 2e82                      	COLON	IMEDD+2,'.'
c:\users\rgeorge\Documents\Atmel Studio\7.0\328eForth_ASM\328eForth_ASM\main.asm(3249): warning: .cseg .db misalignment - padding zero byte
000265 0022                      	.DB		'"'
                                 DOTQ:
000266 940e 383b                 	CALL	DOLIT
000268 3d0e                      	.DW		DOTQP
000269 940e 0170                 	CALL	CALLC
00026b 940e 01aa                 	CALL	STRCQ
00026d 9508                      	RET
                                 
                                 ;; Name compiler
                                 
                                 ;   ?UNIQUE	( a -- a )
                                 ;	Display a warning message if the word already exists.
                                 
                                 ;	COLON	7,"?UNIQUE"
                                 UNIQU:
00026e 940e 399a                 	CALL	DUPP
000270 940e 3e28                 	CALL	NAMEQ	;?name exists
000272 940e 385b                 	CALL	QBRAN
000274 0281                      	.DW		UNIQ1
000275 940e 3d0e                 	CALL	DOTQP	;redefinitions are OK
000277 2007
000278 6572
000279 6544
00027a 2066                      	.DB		7," reDef "	;but the user should be warned
00027b 940e 39ab                 	CALL	OVER
00027d 940e 3b99                 	CALL	COUNT
00027f 940e 3cdd                 	CALL	TYPES	;just in case its not planned
                                 UNIQ1:
000281 940c 3994                 	JMP		DROP
                                 
                                 ;   $,n	( na -- )
                                 ;	Build a new dictionary name using the string at na.
                                 
                                 ;	COLON	3,"$,n"
                                 SNAME:
000283 940e 399a                 	CALL	DUPP
000285 940e 395e                 	CALL	CAT	;?null input
000287 940e 385b                 	CALL	QBRAN
000289 02af                      	.DW		SNAM2
00028a 940e 026e                 	CALL	UNIQU	;?redefinition
00028c 940e 3a2e                 	CALL	LAST
00028e 940e 388d                 	CALL	AT
000290 940e 0162                 	CALL	COMMA	;compile link 
000292 940e 3a23                 	CALL	CPP
000294 940e 388d                 	CALL	AT
000296 940e 3a2e                 	CALL	LAST
000298 940e 3883                 	CALL	STORE	;save new nfa in LAST	
00029a 940e 399a                 	CALL	DUPP
00029c 940e 395e                 	CALL	CAT
00029e 940e 3a39                 	CALL	TWOSL	;na count/2
0002a0 940e 397f                 	CALL	TOR
                                 SNAME1:
0002a2 940e 399a                 	CALL	DUPP
0002a4 940e 388d                 	CALL	AT
0002a6 940e 0162                 	CALL	COMMA	;compile name
0002a8 940e 010d                 	CALL	CELLP
0002aa 940e 3848                 	CALL 	DONXT
0002ac 02a2                      	.DW		SNAME1
0002ad 940c 3994                 	JMP		DROP
                                 SNAM2:
0002af 940e 3d0c                 	CALL	STRQP
0002b1 2005
0002b2 616e
0002b3 656d                      	.DB		5," name"	;null input
0002b4 940c 3e80                 	JMP		ERROR
                                 
                                 ;; FORTH compiler
                                 
                                 ;   $COMPILE	( a -- )
                                 ;	Compile next word to code dictionary as a token or literal.
                                 
                                 ;	COLON	8,"$COMPILE"
                                 SCOMP:
0002b6 940e 3e28                 	CALL	NAMEQ
0002b8 940e 3a4b                 	CALL	QDUP	;?defined
0002ba 940e 385b                 	CALL	QBRAN
0002bc 02cd                      	.DW		SCOM2
0002bd 940e 3894                 	CALL	IAT
0002bf 940e 383b                 	CALL	DOLIT
0002c1 0080                      	.DW		IMEDD
0002c2 940e 39bb                 	CALL	ANDD	;?immediate
0002c4 940e 385b                 	CALL	QBRAN
0002c6 02c9                      	.DW		SCOM1
0002c7 940c 3873                 	JMP		EXECU
                                 SCOM1:
0002c9 940e 3a39                 	CALL	TWOSL
0002cb 940c 0170                 	JMP		CALLC
                                 SCOM2:
0002cd 940e 3c75                 	CALL	NUMBQ
0002cf 940e 385b                 	CALL	QBRAN
0002d1 02d4                      	.DW		SCOM3
0002d2 940c 01a4                 	JMP		LITER
                                 SCOM3:
0002d4 940c 3e80                 	JMP		ERROR	;error
                                 
                                 ;   OVERT	( -- )
                                 ;	Link a new word into the current vocabulary.
                                 
0002d6 04c8
0002d7 4f05
0002d8 4556
0002d9 5452                      	COLON	5,"OVERT"
                                 OVERT:
0002da 940e 3a2e                 	CALL	LAST
0002dc 940e 388d                 	CALL	AT
0002de 940e 3a1e                 	CALL	CNTXT
0002e0 940c 3883                 	JMP		STORE
                                 
                                 ;   ;	( -- )
                                 ;	Terminate a colon definition.
                                 
0002e2 05ae
0002e3 3bc1                      	COLON	IMEDD+COMPO+1,";"
                                 SEMIS:
0002e4 940e 383b                 	CALL	DOLIT
0002e6 9508                      	.DW		RETT
0002e7 940e 0162                 	CALL	COMMA
0002e9 940e 3ead                 	CALL	LBRAC
0002eb 940c 02da                 	JMP		OVERT
                                 
                                 ;   ]	( -- )
                                 ;	Start compiling the words in the input stream.
                                 
0002ed 05c6
0002ee 5d01                      	COLON	1,"]"
                                 RBRAC:
0002ef 940e 383b                 	CALL	DOLIT
0002f1 056c                      	.DW		SCOMP*2
0002f2 940e 3a12                 	CALL	TEVAL
0002f4 940c 3883                 	JMP		STORE
                                 
                                 ;   :	( -- ; <string> )
                                 ;	Start a new colon definition using next word as its name.
                                 
0002f6 05dc
0002f7 3a01                      	COLON	1,":"
                                 COLONN:
0002f8 940e 3daf                 	CALL	TOKEN
0002fa 940e 0283                 	CALL	SNAME
0002fc 940c 02ef                 	JMP		RBRAC
                                 
                                 ;   IMMEDIATE	( -- )
                                 ;	Make the last compiled word an immediate word.
                                 
0002fe 05ee
0002ff 4909
000300 4d4d
000301 4445
000302 4149
000303 4554                      	COLON	9,"IMMEDIATE"
                                 IMMED:
000304 940e 383b                 	CALL	DOLIT
000306 0080                      	.DW		IMEDD
000307 940e 3a2e                 	CALL	LAST
000309 940e 388d                 	CALL	AT
00030b 940e 3894                 	CALL	IAT
00030d 940e 39c3                 	CALL	ORR
00030f 940e 3a2e                 	CALL	LAST
000311 940e 388d                 	CALL	AT
000313 940c 38dd                 	JMP		ISTOR
                                 
                                 ;; Defining words
                                 
                                 ;   CREATE	( -- ; <string> )
                                 ;	Compile a new array entry without allocating code space.
                                 
000315 05fe
000316 4306
000317 4552
000318 5441
c:\users\rgeorge\Documents\Atmel Studio\7.0\328eForth_ASM\328eForth_ASM\main.asm(147): warning: .cseg .db misalignment - padding zero byte
c:\users\rgeorge\Documents\Atmel Studio\7.0\328eForth_ASM\328eForth_ASM\main.asm(3399): macro 'COLON' called here
000319 0045                      	COLON	6,"CREATE"
                                 CREAT:
00031a 940e 3daf                 	CALL	TOKEN
00031c 940e 0283                 	CALL	SNAME
00031e 940e 02da                 	CALL	OVERT
000320 940e 383b                  	CALL	DOLIT
000322 39dd                      	.DW		DOVAR
000323 940e 0170                 	CALL	CALLC
000325 940e 3a28                 	CALL	DPP
000327 940e 388d                 	CALL	AT
000329 940c 0162                 	JMP		COMMA
                                 
                                 ;   CONSTANT	( n -- ; <string> )
                                 ;	Compile a constant.
                                 
00032b 062c
00032c 4308
00032d 4e4f
00032e 5453
00032f 4e41
c:\users\rgeorge\Documents\Atmel Studio\7.0\328eForth_ASM\328eForth_ASM\main.asm(147): warning: .cseg .db misalignment - padding zero byte
c:\users\rgeorge\Documents\Atmel Studio\7.0\328eForth_ASM\328eForth_ASM\main.asm(3414): macro 'COLON' called here
000330 0054                      	COLON	8,"CONSTANT"
                                 CONST:
000331 940e 3daf                 	CALL	TOKEN
000333 940e 0283                 	CALL	SNAME
000335 940e 02da                 	CALL	OVERT
000337 940e 383b                  	CALL	DOLIT
000339 39dd                      	.DW		DOVAR
00033a 940e 0170                 	CALL	CALLC
00033c 940c 0162                 	JMP		COMMA
                                 
                                 ;   VARIABLE	( -- ; <string> )
                                 ;	Compile a new variable uninitialized.
                                 
00033e 0658
00033f 5608
000340 5241
000341 4149
000342 4c42
c:\users\rgeorge\Documents\Atmel Studio\7.0\328eForth_ASM\328eForth_ASM\main.asm(147): warning: .cseg .db misalignment - padding zero byte
c:\users\rgeorge\Documents\Atmel Studio\7.0\328eForth_ASM\328eForth_ASM\main.asm(3427): macro 'COLON' called here
000343 0045                      	COLON	8,"VARIABLE"
                                 VARIA:
000344 940e 031a                 	CALL	CREAT
000346 940e 383b                 	CALL	DOLIT
000348 0002                      	.DW		2
000349 940c 0153                 	JMP		ALLOT
                                 
                                 ;============================================================================
                                 
                                 .EQU	LASTN	=	_LINK*2	;last name address in name dictionary
                                 
                                 .EQU	DTOP	=	$140	;next available memory in name dictionary
                                 .EQU	CTOP	=	pc*2	;next available memory in code dictionary
                                 
                                 
                                 
                                 ;===============================================================
                                 
                                 
                                 
                                 


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

"ATmega328P" register use summary:
x  :   3 y  : 120 z  :  21 r0 :   7 r1 :   4 r2 :   6 r3 :   3 r4 :   0 
r5 :   0 r6 :   0 r7 :   0 r8 :   0 r9 :   0 r10:   1 r11:   1 r12:   0 
r13:   0 r14:  10 r15:   8 r16:  20 r17:  13 r18:  21 r19:  20 r20:  13 
r21:   8 r22:   4 r23:   0 r24: 144 r25:  73 r26:  42 r27:  26 r28:   4 
r29:   2 r30:  32 r31:  17 
Registers used: 26 out of 35 (74.3%)

"ATmega328P" instruction use summary:
.lds  :   0 .sts  :   0 adc   :  10 add   :   6 adiw  :  27 and   :   2 
andi  :   1 asr   :   2 bclr  :   0 bld   :   0 brbc  :   0 brbs  :   1 
brcc  :   0 brcs  :   1 break :   0 breq  :   2 brge  :   2 brhc  :   0 
brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 brlt  :   1 brmi  :   0 
brne  :   3 brpl  :   0 brsh  :   0 brtc  :   0 brts  :   0 brvc  :   0 
brvs  :   0 bset  :   0 bst   :   0 call  : 148 cbi   :   0 cbr   :   0 
clc   :   0 clh   :   0 cli   :   0 cln   :   0 clr   :  16 cls   :   0 
clt   :   0 clv   :   0 clz   :   0 com   :   2 cp    :   3 cpc   :   6 
cpi   :   0 cpse  :   0 dec   :   1 eor   :   2 fmul  :   0 fmuls :   0 
fmulsu:   0 icall :   0 ijmp  :   0 in    :   2 inc   :   1 jmp   :  28 
ld    :  84 ldd   :   2 ldi   :  20 lds   :   3 lpm   :  15 lsl   :   7 
lsr   :   0 mov   :   2 movw  :  29 mul   :   4 muls  :   0 mulsu :   0 
neg   :   0 nop   :   0 or    :   4 ori   :   0 out   :   6 pop   :  24 
push  :  24 rcall : 796 ret   :  87 reti  :   0 rjmp  : 129 rol   :  11 
ror   :   4 sbc   :   5 sbci  :   1 sbi   :   0 sbic  :   0 sbis  :   0 
sbiw  :  17 sbr   :   0 sbrc  :   1 sbrs  :   2 sec   :   0 seh   :   0 
sei   :   0 sen   :   0 ser   :   2 ses   :   0 set   :   0 sev   :   0 
sez   :   0 sleep :   0 spm   :   2 st    :  42 std   :   2 sts   :   5 
sub   :   3 subi  :   3 swap  :   0 tst   :   1 wdr   :   0 
Instructions used: 53 out of 113 (46.9%)

"ATmega328P" memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x007f86   3572   1612   5184   32768  15.8%
[.dseg] 0x000100 0x000100      0      0      0    2048   0.0%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 85 warnings
